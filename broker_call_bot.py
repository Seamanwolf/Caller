import os
import logging
import requests
import pandas as pd
import matplotlib.pyplot as plt
import calendar
from datetime import datetime, timedelta
from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import json
import re
from tqdm import tqdm
from prettytable import PrettyTable
from colorama import init, Fore, Style
import numpy as np
import matplotlib
matplotlib.use('Agg')
import asyncio
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é EmployeeDataProvider
from employee_data_provider import EmployeeDataProvider

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞)
def get_actual_now():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É.
    """
    return datetime.now()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –í–ê–¢–°
API_KEY = "d1b0ef65-e491-43f9-967b-df67d4657dbb"
API_URL = "https://leto.megapbx.ru/crmapi/v1"

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ALLOWED_USERS = [194530, 368752085, 261337953, 702018715]

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
AUTO_REPORT_USER_ID = 194530

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ (–Ω—É–∂–Ω–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
bot_application = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–≥–ª–æ–±–∞–ª—å–Ω–æ)
EMPLOYEE_API_TOKEN = "a4d4a75094d8f9d8597085ac0ac12a51"
employee_provider = EmployeeDataProvider(EMPLOYEE_API_TOKEN)

def setup_logging():
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    logging.getLogger().addHandler(logging.NullHandler())
    return logging.getLogger()

def get_department_numbers(department):
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª–∞: {department}")
    if not department:
        return None
    try:
        if isinstance(department, (int, float)):
            return str(int(department))
        
        department = str(department)
        department = re.sub(r'[^\d]', '', department)
        result = department if department else None
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–¥–µ–ª–∞: {result}")
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–¥–µ–ª–∞ '{department}': {str(e)}")
        return None

async def start(update, context):
    user = update.effective_user
    user_id = user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    if user_id not in ALLOWED_USERS:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")
        await update.message.reply_text("‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–¥–µ–ª–æ–≤!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    keyboard = [
        [InlineKeyboardButton("üìã –û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º", callback_data="report:all")],
        [InlineKeyboardButton("üè¢ –û—Ç—á—ë—Ç –ø–æ –æ—Ç–¥–µ–ª—É", callback_data="report:by")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data="update_employees")]
    ]
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        query = update.callback_query
        await query.edit_message_text(welcome_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_main_menu(update, context):
    welcome_text = "üëã –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    keyboard = [
        [InlineKeyboardButton("üìã –û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º", callback_data="report:all")],
        [InlineKeyboardButton("üè¢ –û—Ç—á—ë—Ç –ø–æ –æ—Ç–¥–µ–ª—É", callback_data="report:by")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data="update_employees")]
    ]
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        query = update.callback_query
        await query.edit_message_text(welcome_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def button_callback(update, context):
    query = update.callback_query
    data = query.data
    logger.info(f"Callback received: {data}")
    # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –Ω–µ "–≤–∏—Å–µ–ª–∏"
    try:
        await query.answer()
    except Exception:
        pass
    # –£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –ª–æ–≥–∏–∫–∞ —Å "report_all"/"report_by_department" –∏ –≤—ã–±–æ—Ä–æ–º –∫–≤–∞—Ä—Ç–∞–ª–∞
    if data == "back_to_main":
        await show_main_menu(update, context)
        return
    if data == "update_employees":
        await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
        try:
            employee_provider.update_cache(force=True)
            await query.edit_message_text("‚úÖ –ö—ç—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")]
            ]))
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")]
            ]))
        return
    if data == "report:all":
        context.user_data["report_type"] = "all"
        context.user_data["dept_number"] = "all"
        await show_period_selection(query, context, sheet_type=None, report_type="all")
        return
    if data == "report:by":
        context.user_data["report_type"] = "by"
        # –î–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤
        await show_department_list(query, context, sheet_type=None, report_type="by")
        return
    if data == "quarter:3sheets":
        # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ç–¥–µ–ª—É –∏ —Å–∞–º–æ–≥–æ –æ—Ç–¥–µ–ª–∞
        if not (context.user_data.get("report_type") == "by" and context.user_data.get("dept_number")):
            context.user_data["report_type"] = "by"
            await show_department_list(query, context, context.user_data.get("sheet_type", ""), "by")
            return
        context.user_data["report_type"] = "quarter_3sheets"
        await show_year_selection(query, context)
        return
    if data == "quarter:1sheet":
        if not (context.user_data.get("report_type") == "by" and context.user_data.get("dept_number")):
            context.user_data["report_type"] = "by"
            await show_department_list(query, context, context.user_data.get("sheet_type", ""), "by")
            return
        context.user_data["report_type"] = "quarter_1sheet"
        await show_year_selection(query, context)
        return
    if data.startswith("dept:"):
        dept_data = data.split(":")
        if len(dept_data) >= 2:
            dept_number = dept_data[1]
            context.user_data["dept_number"] = str(dept_number)
            context.user_data["selected_dept_number"] = str(dept_number)
            await show_period_selection(query, context, sheet_type=None, report_type="by")
            return
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ callback ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—Ç—ã —Ç–µ–ø–µ—Ä—å –∫ back_to_main
    if data == "back_to_report_selection":
        await show_main_menu(update, context)
        return
    if data == "back_to_sheet_selection":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –ª–∏—Å—Ç—É
        sheet_type = context.user_data.get("sheet_type", "")
        await show_report_selection(query, context, sheet_type)
        return
    if data == "back_to_department_selection":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞
        sheet_type = context.user_data.get("sheet_type", "")
        report_type = context.user_data.get("report_type", "")
        await show_department_list(query, context, sheet_type, report_type)
        return
    if data == "back_to_period_selection":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞
        sheet_type = context.user_data.get("sheet_type", "")
        report_type = context.user_data.get("report_type", "")
        await show_period_selection(query, context, sheet_type, report_type)
        return
    if data == "confirm_custom_period":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        start_date = context.user_data.get("custom_start_date")
        end_date = context.user_data.get("custom_end_date")
        
        if not start_date or not end_date:
            await query.edit_message_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–±–µ –¥–∞—Ç—ã (–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞)",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_period_selection")]])
            )
            return
            
        context.user_data["period"] = "custom"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º sheet_type, report_type –∏ dept_number –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        sheet_type = context.user_data.get("sheet_type", "")
        report_type = context.user_data.get("report_type", "")
        dept_number = context.user_data.get("dept_number", "all")
        
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        
        await show_format_selection(query, context, sheet_type, report_type, dept_number, "custom")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ callback –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–∏–æ–¥–µ
    if data.startswith("period:"):
        period = data.split(":")[1]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º sheet_type, report_type –∏ dept_number –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        sheet_type = context.user_data.get("sheet_type", "")
        report_type = context.user_data.get("report_type", "")
        dept_number = context.user_data.get("dept_number", "all")
        
        logger.info(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: {period}, sheet_type: {sheet_type}, report_type: {report_type}, dept_number: {dept_number}")
        
        if period == "custom_range":
            await query.edit_message_text(
                "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –î–î.–ú–ú.–ì–ì–ì–ì",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_custom_period")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_period_selection")]
                ])
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç
            context.user_data["waiting_for_dates"] = True
            context.user_data["date_input_type"] = "range"
            return
        
        elif period == "custom_date":
            await query.edit_message_text(
                "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_custom_period")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_period_selection")]
                ])
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
            context.user_data["waiting_for_dates"] = True
            context.user_data["date_input_type"] = "single"
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data["period"] = period
        
        await show_format_selection(query, context, sheet_type, report_type, dept_number, period)
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ callback –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ—Ä–º–∞—Ç–µ
    if data.startswith("format:"):
        format_type = data.split(":")[1]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º sheet_type, report_type, dept_number –∏ period –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        sheet_type = context.user_data.get("sheet_type", "")
        report_type = context.user_data.get("report_type", "")
        dept_number = context.user_data.get("dept_number", "all")
        period = context.user_data.get("period", "")
        
        logger.info(f"–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç: {format_type}, sheet_type: {sheet_type}, report_type: {report_type}, dept_number: {dept_number}, period: {period}")
        
        if format_type == "incoming":
            await handle_incoming_numbers_excel(query, context, sheet_type, dept_number, period)
        else:
            await handle_report_format(query, context, sheet_type, dept_number, period, format_type)
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ callback –¥–∞–Ω–Ω—ã–µ –æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–µ (–¥—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω)
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    if data.startswith("year:"):
        year = int(data.split(":")[1])
        context.user_data["selected_year"] = year
        await show_quarter_selection(query, context, year)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞
    if data.startswith("quarter:"):
        quarter_data = data.split(":")
        if len(quarter_data) == 3:
            # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞
            year = int(quarter_data[1])
            quarter = int(quarter_data[2])
            await generate_quarter_report(query, context, year, quarter)
            return
        elif len(quarter_data) == 2:
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–∏–∑ —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞)
            sheets_key = quarter_data[1]
            if sheets_key == "3sheets":
                context.user_data["report_type"] = "quarter_3sheets"
                # dept_number –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
                await show_year_selection(query, context)
            elif sheets_key == "1sheet":
                context.user_data["report_type"] = "quarter_1sheet"
                await show_year_selection(query, context)
            return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ callback –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–µ –æ—Ç—á–µ—Ç–∞
    if data.startswith("report:"):
        report_type = data.split(":")[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["report_type"] = report_type
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º sheet_type –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        sheet_type = context.user_data.get("sheet_type", "")
        
        logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –æ—Ç—á–µ—Ç–∞: {report_type}, sheet_type: {sheet_type}")
        
        if report_type == "all":
            # –î–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞
            context.user_data["dept_number"] = "all"
            context.user_data["selected_dept_number"] = "all"
            await show_period_selection(query, context, sheet_type, report_type)
        else:
            # –î–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤
            await show_department_list(query, context, sheet_type, report_type)
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ callback –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–µ –ª–∏—Å—Ç–∞
    if data.startswith("sheet:"):
        sheet_type = data.split(":")[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ª–∏—Å—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["sheet_type"] = sheet_type
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±–æ—Ä—ã –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
        if "dept_number" in context.user_data:
            del context.user_data["dept_number"]
        if "selected_dept_number" in context.user_data:
            del context.user_data["selected_dept_number"]
            
        logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –ª–∏—Å—Ç–∞: {sheet_type}")
        
        await show_report_selection(query, context, sheet_type)
        return
        
    if data == "update_employees":
        await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
        try:
            employee_provider.update_cache(force=True)
            await query.edit_message_text("‚úÖ –ö—ç—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")]
            ]))
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")]
            ]))
        return
    
    await query.edit_message_text(
        f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
    )

async def show_report_selection(query, context, sheet_type):
    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞—é –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è sheet_type={sheet_type}")
    sheet_name = "–í—Ç–æ—Ä–∏—á–∫–∞" if sheet_type == "vtorichka" else "–ó–∞–≥–æ—Ä–æ–¥–∫–∞"
    
    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º", callback_data=f"report:all")],
        [InlineKeyboardButton("üìã –ü–æ –æ—Ç–¥–µ–ª–∞–º", callback_data=f"report:by")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_sheet_selection")]
    ]
    
    try:
        await query.edit_message_text(
            f"üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ª–∏—Å—Ç–∞ '{sheet_name}':",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        if 'Message is not modified' not in str(e):
            raise

async def show_period_selection(query, context, sheet_type, report_type):
    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞—é –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è sheet_type={sheet_type}, report_type={report_type}")
    sheet_name = "–í—Ç–æ—Ä–∏—á–∫–∞" if sheet_type == "vtorichka" else "–ó–∞–≥–æ—Ä–æ–¥–∫–∞"
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="period:today")],
        [InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="period:current_month")],
        [InlineKeyboardButton("üìÖ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", callback_data="period:previous_month")],
        [InlineKeyboardButton("üìÖ –ó–∞ 7 –¥–Ω–µ–π", callback_data="period:week")],
        [InlineKeyboardButton("üìÖ –ó–∞ 30 –¥–Ω–µ–π", callback_data="period:month")],
        [InlineKeyboardButton("üìÖ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="period:custom_range")],
        [InlineKeyboardButton("üìÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞", callback_data="period:custom_date")],
    ]

    # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –ø–æ –æ—Ç–¥–µ–ª—É ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–Ω—É—Ç—Ä—å —ç—Ç–æ–≥–æ –º–µ–Ω—é
    if report_type == "by":
        keyboard.extend([
            [InlineKeyboardButton("üìä –ö–≤–∞—Ä—Ç–∞–ª (3 –ª–∏—Å—Ç–∞)", callback_data="quarter:3sheets")],
            [InlineKeyboardButton("üìà –ö–≤–∞—Ä—Ç–∞–ª (1 –ª–∏—Å—Ç)", callback_data="quarter:1sheet")],
        ])

    keyboard.extend([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_department_selection" if report_type == "by" else "back_to_report_selection")]
    ])
    
    try:
        await query.edit_message_text(
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        if 'Message is not modified' not in str(e):
            raise

# –î–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def show_loading_animation(query, context, base_text="–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"):
    animation = ["", ".", "..", "...", " ....", " .....", " ......"]
    try:
        for i in range(60):  # –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(0.5)
            await query.edit_message_text(f"{base_text}{animation[i % len(animation)]}")
    except asyncio.CancelledError:
        pass
    except Exception:
        pass

async def show_department_list(query, context, sheet_type, report_type):
    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤ –¥–ª—è sheet_type={sheet_type}, report_type={report_type}")
    loading_task = asyncio.create_task(show_loading_animation(query, context))
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –∫—ç—à–∞
        employees = employee_provider.get_employees()
        filtered = employees
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–¥–µ–ª–∞–º
        departments = {}
        import re
        for emp in filtered:
            dept_raw = emp['department']
            match = re.search(r'(\d+)', str(dept_raw))
            if match:
                dept = str(int(match.group(1)))
                if dept not in departments:
                    departments[dept] = []
                departments[dept].append({
                    'phone': emp['sim'],
                    'name': f"{emp['last_name']} {emp['first_name']}",
                    'department': emp['department']
                })
        loading_task.cancel()
        try:
            await loading_task
        except asyncio.CancelledError:
            pass
        if not departments:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏")
            await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏", 
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_report_selection")]])
            )
            return
        keyboard = []
        for dept_number in sorted(departments.keys(), key=int):
            callback_data = f"dept:{dept_number}"
            keyboard.append([InlineKeyboardButton(f"–û—Ç–¥–µ–ª {dept_number} ({len(departments[dept_number])} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)", callback_data=callback_data)])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_report_selection")])
        try:
            await query.edit_message_text(
                f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            if 'Message is not modified' not in str(e):
                raise
    except Exception as e:
        loading_task.cancel()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤: {str(e)}")
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", 
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_report_selection")]])
        )

async def show_format_selection(query, context, sheet_type, report_type, dept_number, period):
    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞—é –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è sheet_type={sheet_type}, report_type={report_type}, dept_number={dept_number}, period={period}")
    sheet_name = "–í—Ç–æ—Ä–∏—á–∫–∞" if sheet_type == "vtorichka" else "–ó–∞–≥–æ—Ä–æ–¥–∫–∞"
    
    keyboard = [
        [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫", callback_data="format:plot")],
        [InlineKeyboardButton("üìã –¢–∞–±–ª–∏—Ü–∞", callback_data="format:table")],
        [InlineKeyboardButton("üìë Excel", callback_data="format:excel")],
        [InlineKeyboardButton("üìû –í—Ö–æ–¥—è—â–∏–µ –Ω–æ–º–µ—Ä–∞", callback_data="format:incoming")],
        [InlineKeyboardButton("üìä –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã", callback_data="format:all")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_period_selection")]
    ]
    
    try:
        await query.edit_message_text(
            f"üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ª–∏—Å—Ç–∞ '{sheet_name}':",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        if 'Message is not modified' not in str(e):
            raise

async def initiate_custom_period(query, context, sheet_type, report_type):
    for key in ["custom_start_year", "custom_start_month", "custom_start_day", "custom_start_date",
                "custom_end_year", "custom_end_month", "custom_end_day", "custom_end_date"]:
        context.user_data.pop(key, None)
    current_year = datetime.now().year
    keyboard = []
    for y in range(2020, current_year + 3):
        keyboard.append([InlineKeyboardButton(str(y), callback_data=f"custom|start|year|{y}|{sheet_type}|{report_type}")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"period_{sheet_type}_{report_type}")])
    try:
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        if 'Message is not modified' not in str(e):
            raise

async def handle_custom_period(query, context):
    data = query.data
    parts = data.split("|")
    if len(parts) != 8:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±–æ—Ä–∞.")
        return
    
    _, phase, field, value, sheet_type, report_type = parts
    
    if phase == "start":
        if field == "year":
            context.user_data["custom_start_year"] = value
            keyboard = []
            row = []
            for m in range(1, 13):
                m_str = f"{m:02d}"
                row.append(InlineKeyboardButton(m_str, callback_data=f"custom|start|month|{m_str}|{sheet_type}|{report_type}"))
                if len(row) == 4:
                    keyboard.append(row)
                    row = []
            if row:
                keyboard.append(row)
            try:
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
            except Exception as e:
                if 'Message is not modified' not in str(e):
                    raise
        elif field == "month":
            context.user_data["custom_start_month"] = value
            year = int(context.user_data.get("custom_start_year"))
            month = int(value)
            _, num_days = calendar.monthrange(year, month)
            keyboard = []
            row = []
            for d in range(1, num_days + 1):
                d_str = f"{d:02d}"
                row.append(InlineKeyboardButton(d_str, callback_data=f"custom|start|day|{d_str}|{sheet_type}|{report_type}"))
                if len(row) == 5:
                    keyboard.append(row)
                    row = []
            if row:
                keyboard.append(row)
            try:
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
            except Exception as e:
                if 'Message is not modified' not in str(e):
                    raise
        elif field == "day":
            context.user_data["custom_start_day"] = value
            start_date_str = (context.user_data["custom_start_year"] +
                            context.user_data["custom_start_month"] +
                            context.user_data["custom_start_day"])
            context.user_data["custom_start_date"] = start_date_str
            keyboard = []
            current_year = datetime.now().year
            for y in range(2020, current_year + 3):
                keyboard.append([InlineKeyboardButton(str(y), callback_data=f"custom|end|year|{y}|{sheet_type}|{report_type}")])
            try:
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
            except Exception as e:
                if 'Message is not modified' not in str(e):
                    raise
    elif phase == "end":
        if field == "year":
            context.user_data["custom_end_year"] = value
            keyboard = []
            row = []
            for m in range(1, 13):
                m_str = f"{m:02d}"
                row.append(InlineKeyboardButton(m_str, callback_data=f"custom|end|month|{m_str}|{sheet_type}|{report_type}"))
                if len(row) == 4:
                    keyboard.append(row)
                    row = []
            if row:
                keyboard.append(row)
            try:
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
            except Exception as e:
                if 'Message is not modified' not in str(e):
                    raise
        elif field == "month":
            context.user_data["custom_end_month"] = value
            year = int(context.user_data.get("custom_end_year"))
            month = int(value)
            _, num_days = calendar.monthrange(year, month)
            keyboard = []
            row = []
            for d in range(1, num_days + 1):
                d_str = f"{d:02d}"
                row.append(InlineKeyboardButton(d_str, callback_data=f"custom|end|day|{d_str}|{sheet_type}|{report_type}"))
                if len(row) == 5:
                    keyboard.append(row)
                    row = []
            if row:
                keyboard.append(row)
            try:
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
            except Exception as e:
                if 'Message is not modified' not in str(e):
                    raise
        elif field == "day":
            context.user_data["custom_end_day"] = value
            end_date_str = (context.user_data["custom_end_year"] +
                          context.user_data["custom_end_month"] +
                          context.user_data["custom_end_day"])
            context.user_data["custom_end_date"] = end_date_str
            
            if context.user_data["custom_end_date"] < context.user_data["custom_start_date"]:
                await query.edit_message_text("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–Ω–æ–≤–∞.")
                return
                
            await show_format_selection(query, context, sheet_type, report_type, "custom")

async def handle_report_format(query, context, sheet_type, dept_number, period, format_type):
    sheet_name = '–í—Å–µ –æ—Ç–¥–µ–ª—ã'
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞: —Ç–∏–ø={sheet_type}, –æ—Ç–¥–µ–ª={dept_number}, –ø–µ—Ä–∏–æ–¥={period}, —Ñ–æ—Ä–º–∞—Ç={format_type}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –æ—Ç–¥–µ–ª–∞ –∏–∑ context.user_data
    if dept_number == "None" or not dept_number or dept_number == "undefined":
        if context.user_data.get("selected_dept_number"):
            dept_number = context.user_data.get("selected_dept_number")
            logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –∏–∑ context.user_data['selected_dept_number']: {dept_number}")
        elif context.user_data.get("dept_number"):
            dept_number = context.user_data.get("dept_number")
            logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –∏–∑ context.user_data['dept_number']: {dept_number}")
    
    logger.info(f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {dept_number}")
    
    try:
        await query.edit_message_text("üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...", reply_markup=None)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –∫—ç—à–∞
        employees = employee_provider.get_employees()
        filtered = employees
        
        if not filtered:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞", 
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞")
        
        await query.edit_message_text("üîÑ –§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤...", reply_markup=None)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –æ—Ç–¥–µ–ª–∞–º
        departments = {}
        import re
        for employee in filtered:
            dept_raw = employee['department']
            match = re.search(r'(\d+)', str(dept_raw))
            if match:
                dept = str(int(match.group(1)))
                if dept not in departments:
                    departments[dept] = []
                departments[dept].append({
                    'phone': employee['sim'],
                    'name': f"{employee['last_name']} {employee['first_name']}",
                    'department': employee['department']
                })

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(departments)} –æ—Ç–¥–µ–ª–æ–≤: {list(departments.keys())}")
        
        if not departments:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏")
            await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return

        await query.edit_message_text("üîÑ –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–≤–æ–Ω–∫–æ–≤...", reply_markup=None)

        try:
            actual_period = context.user_data.get("period", period)
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥: {actual_period}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD
            start_date_str, end_date_str = get_period_dates(actual_period, context)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞: {start_date_str} - {end_date_str}")
            
            # –ù–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ fetch_call_history
            # —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –¥–ª—è API
            # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä–∏–æ–¥–æ–≤
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞—Ç–∞–º–∏: {start_date_str} - {end_date_str}")
            
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ context.user_data
        report_type = context.user_data.get("report_type", "all")
        logger.info(f"–¢–∏–ø –æ—Ç—á–µ—Ç–∞ –≤ handle_report_format: {report_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞
        if not dept_number or dept_number == "None" or dept_number == "all" or dept_number == "undefined":
            # –ï—Å–ª–∏ –æ—Ç–¥–µ–ª –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ "all", —Ç–æ –¥–ª—è report_type "by" —ç—Ç–æ –æ—à–∏–±–∫–∞
            if report_type != "all":
                logger.error(f"–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞ —Ç–∏–ø–∞ {report_type}")
                await query.edit_message_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞", 
                                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
                )
                return
            dept_number = "all"
        
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞: {dept_number}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞
        if dept_number != "all" and dept_number not in departments:
            logger.error(f"–û—Ç–¥–µ–ª {dept_number} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤: {list(departments.keys())}")
            await query.edit_message_text(f"‚ùå –û—Ç–¥–µ–ª {dept_number} –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return
            
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–æ–º–µ—Ä–∞–º
        all_stats = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –Ω–æ–º–µ—Ä–∞ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        numbers_to_process = []
        if report_type == "all" or dept_number == "all":
            # –î–ª—è –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞
            for dept_id, employees in departments.items():
                logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç–¥–µ–ª–∞ {dept_id} ({len(employees)} —á–µ–ª–æ–≤–µ–∫)")
                numbers_to_process.extend(employees)
        else:
            # –î–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞
            if dept_number in departments:
                logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª–∞ {dept_number} ({len(departments[dept_number])} —á–µ–ª–æ–≤–µ–∫)")
                numbers_to_process = departments[dept_number]
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                context.user_data["selected_dept_number"] = dept_number
                context.user_data["dept_number"] = dept_number
            else:
                logger.error(f"–û—Ç–¥–µ–ª {dept_number} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤: {list(departments.keys())}")
                await query.edit_message_text(f"‚ùå –û—Ç–¥–µ–ª {dept_number} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
                )
                return
        
        logger.info(f"–í—Å–µ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(numbers_to_process)} –Ω–æ–º–µ—Ä–æ–≤")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        total_numbers = len(numbers_to_process)
        processed_numbers = 0
        total_calls_found = 0
        total_incoming_calls = 0
        total_missed_calls = 0
        calls_per_employee = {}
        
        # –¢–µ–∫—É—â–∏–π –≥–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç
        current_year = datetime.now().year
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞
        for employee in numbers_to_process:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                processed_numbers += 1
                progress = (processed_numbers / total_numbers) * 100
                progress_bar = "‚ñà" * int(progress / 2) + "‚ñë" * (50 - int(progress / 2))
                await query.edit_message_text(
                    f"üîÑ –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–≤–æ–Ω–∫–æ–≤...\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress:.1f}%\n"
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_numbers}/{total_numbers} –Ω–æ–º–µ—Ä–æ–≤\n"
                    f"–ù–∞–π–¥–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: {total_calls_found} (–≤—Ö: {total_incoming_calls}, –ø—Ä–æ–ø: {total_missed_calls})",
                    reply_markup=None
                )
                
                logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {employee['name']} ({employee['phone']})")
                data = fetch_call_history(start_date_str, end_date_str, employee['phone'])
                if not data:
                    logger.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {employee['phone']}")
                    continue
                
                total_calls_found += len(data)
                calls_per_employee[employee['phone']] = len(data)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è {employee['phone']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö
                cleaned_data = []
                for call in data:
                    if 'start' in call and call['start']:
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –¥–∞—Ç—É –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–µ
                            raw_dt = call['start']
                            dt = datetime.fromisoformat(raw_dt.replace('Z', '+00:00'))
                            
                            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ–¥–∞ –≤ –±—É–¥—É—â–µ–º
                            cleaned_data.append(call)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –∑–≤–æ–Ω–∫–∞: {str(e)}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å")
                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–æ–Ω–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—É
                            cleaned_data.append(call)
                    else:
                        cleaned_data.append(call)
                
                if cleaned_data:
                    df = pd.DataFrame(cleaned_data)
                else:
                    logger.warning(f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {employee['phone']}")
                    continue
                    
                if not df.empty:
                    # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    type_counts = df['type'].value_counts().to_dict()
                    logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–ª—è {employee['phone']}: {type_counts}")
                    
                    # –°—á–∏—Ç–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ
                    incoming_types = ['in', 'incoming', 'received', 'inbound', '–≤—Ö–æ–¥—è—â–∏–π']
                    outgoing_types = ['out', 'outgoing', '–∏—Å—Ö–æ–¥—è—â–∏–π']
                    missed_statuses = ['noanswer', 'missed', '–ø—Ä–æ–ø—É—â–µ–Ω', '–Ω–µ–æ—Ç–≤–µ—á–µ–Ω', '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞']

                    incoming_count = df[df['type'].str.lower().isin(incoming_types)].shape[0]
                    outgoing_count = df[df['type'].str.lower().isin(outgoing_types)].shape[0]
                    missed_count = df[df['status'].str.lower().isin(missed_statuses)] if 'status' in df.columns else 0
                    missed_count = missed_count.shape[0] if hasattr(missed_count, 'shape') else 0
                    total_incoming_calls += incoming_count
                    total_missed_calls += missed_count
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
                    outgoing_count = df[df['type'] == 'out'].shape[0]
                    stats_dict = {
                        '–°–æ—Ç—Ä—É–¥–Ω–∏–∫': employee['name'],
                        '–û—Ç–¥–µ–ª': get_department_numbers(employee['department']),
                        '–í—Ö–æ–¥—è—â–∏–µ üìû': incoming_count,
                        '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§': outgoing_count,
                        '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå': missed_count,
                        '–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤': len(cleaned_data)
                    }
                    all_stats.append(stats_dict)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ "—Å–µ–≥–æ–¥–Ω—è"
                    if actual_period == "today":
                        logger.info(f"–ü–ï–†–ò–û–î –°–ï–ì–û–î–ù–Ø - –¥–µ—Ç–∞–ª–∏ –¥–ª—è {employee['name']}: –≤—Ö–æ–¥—è—â–∏—Ö: {incoming_count}, –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö: {missed_count}")
                        if len(data) > 0:
                            sample_call = data[0]
                            logger.info(f"–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –°–ï–ì–û–î–ù–Ø: {sample_call}")
                            if 'start' in sample_call:
                                logger.info(f"–î–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ –¥–ª—è –°–ï–ì–û–î–ù–Ø: {sample_call['start']}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {employee['name']} ({employee['phone']}): {str(e)}")
                continue
        
        if not all_stats:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
            return

        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        df_stats = pd.DataFrame(all_stats)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∏—Å–∫–ª—é—á–∞—è –≤—Å–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        df_stats = df_stats[~df_stats['–°–æ—Ç—Ä—É–¥–Ω–∏–∫'].str.contains('–ò–¢–û–ì–û')]

        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω DataFrame —Å {len(df_stats)} —Å—Ç—Ä–æ–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö")
        logger.info(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: {total_calls_found}")

        # –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç—á–µ—Ç—É
        total_incoming = df_stats['–í—Ö–æ–¥—è—â–∏–µ üìû'].sum() if '–í—Ö–æ–¥—è—â–∏–µ üìû' in df_stats.columns else 0
        total_outgoing = df_stats['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'].sum() if '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§' in df_stats.columns else 0
        total_missed = df_stats['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå'].sum() if '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå' in df_stats.columns else 0
        logger.info(f"–ò—Ç–æ–≥–æ –≤–æ –≤—Å–µ–º –æ—Ç—á–µ—Ç–µ: –í—Ö–æ–¥—è—â–∏–µ - {total_incoming}, –ò—Å—Ö–æ–¥—è—â–∏–µ - {total_outgoing}, –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ - {total_missed}, –í—Å–µ–≥–æ: {total_calls_found}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ "—Å–µ–≥–æ–¥–Ω—è"
        if actual_period == "today":
            logger.info(f"–°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–õ–Ø –ü–ï–†–ò–û–î–ê –°–ï–ì–û–î–ù–Ø: –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: {total_calls_found}")
            logger.info(f"–ó–≤–æ–Ω–∫–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –°–ï–ì–û–î–ù–Ø: {calls_per_employee}")
            logger.info(f"–í—Å–µ–≥–æ –≤—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –°–ï–ì–û–î–ù–Ø: {total_incoming}, –≤—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö: {total_missed}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤
        context.user_data["period"] = actual_period

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if format_type == "plot":
            await handle_plot_format(query, context, df_stats, sheet_name)
        elif format_type == "table":
            await handle_table_format(query, context, all_stats, sheet_name)
        elif format_type == "excel":
            await handle_excel_format(query, context, df_stats, sheet_name, actual_period)
        elif format_type == "all":
            # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ "all" –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            await handle_table_format(query, context, all_stats, sheet_name)
            await handle_plot_format(query, context, df_stats, sheet_name)
            await handle_excel_format(query, context, df_stats, sheet_name, actual_period)
            period_info = get_period_dates_info(actual_period, context)
            await query.edit_message_text(f"‚úÖ –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! ({period_info})", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

async def handle_plot_format(query, context, df_stats, sheet_name=None):
    if not sheet_name:
        sheet_name = '–í—Å–µ –æ—Ç–¥–µ–ª—ã'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
    report_type = context.user_data.get("report_type", "all")
    logger.info(f"–¢–∏–ø –æ—Ç—á–µ—Ç–∞ –≤ handle_plot_format: {report_type}")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –∏–∑ context.user_data
    dept_number = context.user_data.get("selected_dept_number", "all")
    logger.info(f"–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –≤ handle_plot_format: {dept_number}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ
    period = context.user_data.get("period", "current_month")
    period_dates = get_period_dates_info(period, context)
    period_str = f"({period_dates})"
    
    try:
        if report_type == "all":
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤")
            if df_stats.empty:
                logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
                await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]))
                return
            fig, ax = plt.subplots(figsize=(15, 8), dpi=150)
            required_columns = ['–û—Ç–¥–µ–ª', '–í—Ö–æ–¥—è—â–∏–µ üìû', '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']
            for column in required_columns:
                if column not in df_stats.columns:
                    df_stats[column] = 0
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º
            dept_totals = df_stats.groupby('–û—Ç–¥–µ–ª').agg({
                '–í—Ö–æ–¥—è—â–∏–µ üìû': 'sum',
                '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§': 'sum',
                '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå': 'sum'
            }).reset_index()
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–º –æ—Ç–¥–µ–ª–µ
            dept_counts = df_stats.groupby('–û—Ç–¥–µ–ª').size().reset_index(name='num_employees')
            dept_totals = dept_totals.merge(dept_counts, on='–û—Ç–¥–µ–ª', how='left')
            dept_totals['num_employees'] = dept_totals['num_employees'].replace(0, 1)
            # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            incoming = (dept_totals['–í—Ö–æ–¥—è—â–∏–µ üìû'] / dept_totals['num_employees']).round(1)
            outgoing = (dept_totals['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'] / dept_totals['num_employees']).round(1)
            missed = (dept_totals['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå'] / dept_totals['num_employees']).round(1)
            x = range(len(dept_totals))
            width = 0.2
            bars1 = ax.bar([i - width for i in x], incoming, width, color='#080835', alpha=0.7, label='–í—Ö–æ–¥—è—â–∏–µ')
            bars2 = ax.bar(x, outgoing, width, color='#45B7D1', alpha=0.7, label='–ò—Å—Ö–æ–¥—è—â–∏–µ')
            bars3 = ax.bar([i + width for i in x], missed, width, color='#e74c3c', alpha=0.4, label='–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ')
            # --- –ò—Å–ø—Ä–∞–≤–ª—è—é –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –ø–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º ---
            incoming_total = dept_totals['–í—Ö–æ–¥—è—â–∏–µ üìû'].fillna(0).astype(int)
            outgoing_total = dept_totals['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'].fillna(0).astype(int)
            missed_total = dept_totals['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå'].fillna(0).astype(int)
            for i, bar in enumerate(bars1):
                height = bar.get_height()
                total = incoming_total.iloc[i]
                avg = incoming.iloc[i]
                if height > 0:
                    ax.text(bar.get_x() + bar.get_width()/2., height, f'{total} ({avg})', ha='center', va='bottom', fontsize=8)
            for i, bar in enumerate(bars2):
                height = bar.get_height()
                total = outgoing_total.iloc[i]
                avg = outgoing.iloc[i]
                if height > 0:
                    ax.text(bar.get_x() + bar.get_width()/2., height, f'{total} ({avg})', ha='center', va='bottom', fontsize=8)
            for i, bar in enumerate(bars3):
                height = bar.get_height()
                total = missed_total.iloc[i]
                avg = missed.iloc[i]
                if height > 0:
                    ax.text(bar.get_x() + bar.get_width()/2., height, f'{total} ({avg})', ha='center', va='bottom', fontsize=8)
            ax.set_title(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –æ—Ç–¥–µ–ª–∞–º (–æ–±—â–µ–µ (—Å—Ä–µ–¥–Ω–µ–µ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)) {sheet_name} {period_str}", pad=20, fontsize=14, fontweight='bold', color='#2c3e50')
            ax.set_xlabel("–û—Ç–¥–µ–ª—ã", fontsize=10, color='#2c3e50')
            ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤", fontsize=10, color='#2c3e50')
            ax.set_xticks(x)
            if not dept_totals.empty:
                x_labels = [str(label)[:10] for label in dept_totals['–û—Ç–¥–µ–ª']]
                ax.set_xticklabels(x_labels, rotation=45, ha='right')
            legend = ax.legend(bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0, frameon=True, facecolor='white', edgecolor='#95a5a6')
            for text in legend.get_texts():
                text.set_color('#2c3e50')
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            ax.spines['left'].set_color('#95a5a6')
            ax.spines['bottom'].set_color('#95a5a6')
            plt.subplots_adjust(right=0.85)
            plt.tight_layout()
            await send_plot(plt.gcf(), query.message.chat_id, context)
            await query.edit_message_text("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]))
            return
        else:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –æ—Ç–¥–µ–ª–∞: {dept_number}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞
            if not dept_number or dept_number == "all":
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–¥–µ–ª", 
                                              reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
                )
                return
                
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ—Ç–¥–µ–ª—É
            filtered_df = df_stats[df_stats['–û—Ç–¥–µ–ª'] == dept_number]
            logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_number}")
            
            if filtered_df.empty:
                logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_number}")
                await query.edit_message_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_number}", 
                                              reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
                )
                return
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –æ–¥–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ
            max_records_per_graph = 30
            num_plots = (len(filtered_df) + max_records_per_graph - 1) // max_records_per_graph  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö
            logger.info(f"–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ {num_plots} –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤
            dept_colors = {}
            colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEEAD', '#D4A5A5', '#9B59B6', '#3498DB', '#E67E22', '#1ABC9C']
            for idx, dept in enumerate(filtered_df['–û—Ç–¥–µ–ª'].unique()):
                dept_colors[dept] = colors[idx % len(colors)]
            
            for plot_num in range(num_plots):
                start_idx = plot_num * max_records_per_graph
                end_idx = min((plot_num + 1) * max_records_per_graph, len(filtered_df))
                plot_data = filtered_df.iloc[start_idx:end_idx]
                plt.style.use('bmh')
                plt.rcParams['figure.facecolor'] = 'white'
                plt.rcParams['axes.facecolor'] = 'white'
                plt.rcParams['grid.color'] = '#95a5a6'
                plt.rcParams['grid.alpha'] = 0.3
                fig, ax = plt.subplots(figsize=(15, 8), dpi=150)
                x = range(len(plot_data))
                width = 0.2
                incoming = plot_data['–í—Ö–æ–¥—è—â–∏–µ üìû'].fillna(0).astype(int)
                outgoing = plot_data['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'].fillna(0).astype(int) if '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§' in plot_data.columns else [0]*len(plot_data)
                missed = plot_data['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå'].fillna(0).astype(int)
                if '–°–æ—Ç—Ä—É–¥–Ω–∏–∫' in plot_data.columns:
                    x_labels = [str(name)[:20] for name in plot_data['–°–æ—Ç—Ä—É–¥–Ω–∏–∫']]
                else:
                    x_labels = [str(num)[:15] for num in plot_data['–ù–æ–º–µ—Ä']]
                bars1 = ax.bar([i - width for i in x], incoming, width, color='#080835', alpha=0.7, label='–í—Ö–æ–¥—è—â–∏–µ')
                bars2 = ax.bar(x, outgoing, width, color='#45B7D1', alpha=0.7, label='–ò—Å—Ö–æ–¥—è—â–∏–µ')
                bars3 = ax.bar([i + width for i in x], missed, width, color='#e74c3c', alpha=0.4, label='–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ')
                for bars in [bars1, bars2, bars3]:
                    for bar in bars:
                        height = bar.get_height()
                        if height > 0:
                            ax.text(bar.get_x() + bar.get_width()/2., height, f'{int(height)}', ha='center', va='bottom', fontsize=8)
                ax.set_title(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ç–¥–µ–ª–∞ {dept_number} ({sheet_name}) {period_str} - –ì—Ä–∞—Ñ–∏–∫ {plot_num + 1}/{num_plots}", 
                            pad=20, fontsize=14, fontweight='bold', color='#2c3e50')
                ax.set_xlabel("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", fontsize=10, color='#2c3e50')
                ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤", fontsize=10, color='#2c3e50')
                ax.set_xticks(x)
                ax.set_xticklabels(x_labels, rotation=45, ha='right')
                legend = ax.legend(bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0, frameon=True, facecolor='white', edgecolor='#95a5a6')
                for text in legend.get_texts():
                    text.set_color('#2c3e50')
                ax.spines['top'].set_visible(False)
                ax.spines['right'].set_visible(False)
                ax.spines['left'].set_color('#95a5a6')
                ax.spines['bottom'].set_color('#95a5a6')
                plt.subplots_adjust(right=0.85)
                plt.tight_layout()
                await send_plot(plt.gcf(), query.message.chat_id, context)
        
        await query.edit_message_text("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}", 
                                     reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

async def handle_table_format(query, context, all_stats, sheet_name=None):
    if not sheet_name:
        sheet_name = '–í—Å–µ –æ—Ç–¥–µ–ª—ã'
    logger.info("–ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
        report_type = context.user_data.get("report_type", "all")
        logger.info(f"–¢–∏–ø –æ—Ç—á–µ—Ç–∞ –≤ handle_table_format: {report_type}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –∏–∑ context.user_data
        dept_number = context.user_data.get("selected_dept_number", "all")
        logger.info(f"–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –≤ handle_table_format: {dept_number}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ
        period = context.user_data.get("period", "current_month")
        period_info = get_period_dates_info(period, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not all_stats:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã")
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã", 
                                       reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        message_parts = []
        current_part = f"üìû –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ {sheet_name} ({period_info}):\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–¥–µ–ª–∞–º
        departments = {}
        import re
        for stat in all_stats:
            if stat and isinstance(stat, dict) and '–ù–æ–º–µ—Ä' in stat and not stat['–ù–æ–º–µ—Ä'].startswith('–ò–¢–û–ì–û'):
                dept_raw = stat.get('–û—Ç–¥–µ–ª')
                if dept_raw:
                    match = re.search(r'(\d+)', str(dept_raw))
                    if match:
                        dept = str(int(match.group(1)))
                        if dept not in departments:
                            departments[dept] = []
                        departments[dept].append(stat)
        
        if not departments:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º")
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã", 
                                       reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
            return
        
        logger.info(f"–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ {len(departments)} –æ—Ç–¥–µ–ª–æ–≤")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–¥–µ–ª—ã, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–¥–µ–ª
        if report_type != "all" and dept_number and dept_number != "all":
            if dept_number in departments:
                filtered_departments = {dept_number: departments[dept_number]}
                departments = filtered_departments
                logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –æ—Ç–¥–µ–ª {dept_number} —Å {len(departments[dept_number])} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")
            else:
                logger.error(f"–û—Ç–¥–µ–ª {dept_number} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤: {list(departments.keys())}")
                await query.edit_message_text(f"‚ùå –û—Ç–¥–µ–ª {dept_number} –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                                         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
                )
                return
        
        if report_type == "all":
            for dept_number, dept_stats in departments.items():
                num_employees = len(dept_stats) if dept_stats else 1
                dept_incoming = sum(s.get('–í—Ö–æ–¥—è—â–∏–µ üìû', 0) for s in dept_stats)
                dept_outgoing = sum(s.get('–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', 0) for s in dept_stats)
                dept_missed = sum(s.get('–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå', 0) for s in dept_stats)
                avg_incoming = round(dept_incoming / num_employees, 1) if num_employees else 0
                avg_outgoing = round(dept_outgoing / num_employees, 1) if num_employees else 0
                avg_missed = round(dept_missed / num_employees, 1) if num_employees else 0
                current_part += f"<b>–û—Ç–¥–µ–ª {dept_number}</b>:\n"
                current_part += f"  –í—Ö–æ–¥—è—â–∏–µ: {dept_incoming} ({avg_incoming})\n"
                current_part += f"  –ò—Å—Ö–æ–¥—è—â–∏–µ: {dept_outgoing} ({avg_outgoing})\n"
                current_part += f"  –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ: {dept_missed} ({avg_missed})\n\n"
                if len(current_part) > 4000:
                    message_parts.append(current_part)
                    current_part = ""
        else:
            # –î–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–æ–º–µ—Ä—É
            for dept_number, dept_stats in departments.items():
                current_part += f"<b>–û—Ç–¥–µ–ª {dept_number}</b>:\n"
                for stat in dept_stats:
                    if '–°–æ—Ç—Ä—É–¥–Ω–∏–∫' in stat and '–ù–æ–º–µ—Ä' in stat:
                        current_part += f"  {stat['–°–æ—Ç—Ä—É–¥–Ω–∏–∫']} ({stat['–ù–æ–º–µ—Ä']}):\n"
                        current_part += f"    –í—Ö–æ–¥—è—â–∏–µ: {stat.get('–í—Ö–æ–¥—è—â–∏–µ üìû', 0)}\n"
                        current_part += f"    –ò—Å—Ö–æ–¥—è—â–∏–µ: {stat.get('–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', 0)}\n"
                        current_part += f"    –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ: {stat.get('–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå', 0)}\n"
                dept_incoming = sum(s.get('–í—Ö–æ–¥—è—â–∏–µ üìû', 0) for s in dept_stats)
                dept_outgoing = sum(s.get('–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', 0) for s in dept_stats)
                dept_missed = sum(s.get('–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå', 0) for s in dept_stats)
                current_part += f"\n<b>–ò—Ç–æ–≥–æ –ø–æ –æ—Ç–¥–µ–ª—É {dept_number}:</b>\n"
                current_part += f"  –í—Ö–æ–¥—è—â–∏–µ: {dept_incoming}\n"
                current_part += f"  –ò—Å—Ö–æ–¥—è—â–∏–µ: {dept_outgoing}\n"
                current_part += f"  –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ: {dept_missed}\n\n"
                if len(current_part) > 4000:
                    message_parts.append(current_part)
                    current_part = ""
        
        if current_part:
            message_parts.append(current_part)
        
        logger.info(f"–¢–∞–±–ª–∏—Ü–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞: {len(message_parts)} —á–∞—Å—Ç–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if not message_parts:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", 
                                       reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏
        if len(message_parts) > 1:
            for i, part in enumerate(message_parts):
                if i == 0:
                    await query.edit_message_text(part, parse_mode="HTML", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
                )
                else:
                    await context.bot.send_message(chat_id=query.message.chat_id, text=part, parse_mode="HTML")
        else:
            await query.edit_message_text(message_parts[0], parse_mode="HTML", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}", 
                                   reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

def fetch_call_history(start_date: str, end_date: str, phone_number: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ API –í–ê–¢–°.
    
    Args:
        start_date (str): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ YYYYMMDD
        end_date (str): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ YYYYMMDD
        phone_number (str): –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ –∑–≤–æ–Ω–∫–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}, –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
    headers = {"X-API-KEY": API_KEY, "Content-Type": "application/json"}
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX
    phone = phone_number.strip()
    if phone and len(phone) >= 10:
        phone = re.sub(r'\D', '', phone)
        if len(phone) == 10:
            phone = '+7' + phone
        elif len(phone) == 11:
            if phone.startswith('7') or phone.startswith('8'):
                phone = '+7' + phone[1:]
            else:
                phone = '+' + phone
        else:
            phone = '+' + phone
        
        logger.debug(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –Ω–æ–º–µ—Ä: {phone_number} -> {phone}")
    else:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}")
        return []
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç—ã datetime
        if re.match(r'^\d{4}-\d{2}-\d{2}$', start_date) and re.match(r'^\d{4}-\d{2}-\d{2}$', end_date):
            start_date_obj = datetime.strptime(start_date, "%Y-%m-%d")
            end_date_obj = datetime.strptime(end_date, "%Y-%m-%d")
        elif re.match(r'^\d{8}$', start_date) and re.match(r'^\d{8}$', end_date):
            start_date_obj = datetime.strptime(start_date, "%Y%m%d")
            end_date_obj = datetime.strptime(end_date, "%Y%m%d")
        else:
            start_date_obj = datetime.strptime(start_date, "%Y%m%d")
            end_date_obj = datetime.strptime(end_date, "%Y%m%d")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è: –Ω–∞—á–∞–ª–æ –¥–Ω—è –¥–ª—è start_date, –∫–æ–Ω–µ—Ü –¥–Ω—è –¥–ª—è end_date
        start_date_obj = start_date_obj.replace(hour=0, minute=0, second=0, microsecond=0)
        end_date_obj = end_date_obj.replace(hour=23, minute=59, second=59, microsecond=999999)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç YYYYmmddTHHMMSSZ
        start_date_formatted = start_date_obj.strftime("%Y%m%dT%H%M%SZ")
        end_date_formatted = end_date_obj.strftime("%Y%m%dT%H%M%SZ")
        
        logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è API: {start_date_formatted} - {end_date_formatted}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç: {str(e)}")
        return []
    
    params = {
        "start": start_date_formatted,
        "end": end_date_formatted,
        "diversion": phone,
        "type": "all",  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∑–≤–æ–Ω–∫–æ–≤
        "limit": 1000
    }
    
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {params}")
    
    try:
        response = requests.get(f"{API_URL}/history/json", headers=headers, params=params)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
        logger.info(f"API –∑–∞–ø—Ä–æ—Å: {API_URL}/history/json")
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        logger.info(f"–ü–æ–ª–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞: {response.url}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data –Ω–µ None –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
                if data is None:
                    logger.info(f"API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}")
                    return []
                
                if not isinstance(data, list):
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API: {type(data)}")
                    return []
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}")
                
                # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –∑–≤–æ–Ω–∫–æ–≤
                call_types = {}
                for call in data:
                    call_type = call.get('type', 'unknown')
                    call_types[call_type] = call_types.get(call_type, 0) + 1
                
                logger.info(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ —Ç–∏–ø–∞–º: {call_types}")
                
                # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if data and len(data) > 0:
                    logger.info(f"–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞: {data[0]}")
                    if 'start' in data[0]:
                        logger.info(f"–î–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ: {data[0]['start']}")
                else:
                    logger.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ API –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone} –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date_formatted} - {end_date_formatted}")
                
                return data
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {str(e)}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {response.text[:500]}")
                return []
        else:
            try:
                logger.error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API —Å –æ—à–∏–±–∫–æ–π: {response.text}")
                error_data = response.json()
                error_msg = error_data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            except Exception:
                error_msg = f"HTTP-—Å—Ç–∞—Ç—É—Å: {response.status_code}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.text[:500]}"
            logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}, {error_msg}")
            return []
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}")
        return []
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return []

def process_json_data(json_data, account_display, start_date_str, end_date_str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    
    Args:
        json_data (list): –°–ø–∏—Å–æ–∫ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ API
        account_display (str): –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
        start_date_str (str): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        end_date_str (str): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        
    Returns:
        tuple: (DataFrame —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, —Å–ø–∏—Å–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤)
    """
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {start_date_str} - {end_date_str}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ –æ–±—ä–µ–∫—Ç—ã datetime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    start_date = datetime.strptime(start_date_str, "%Y-%m-%d").replace(hour=0, minute=0, second=0, microsecond=0)
    end_date = datetime.strptime(end_date_str, "%Y-%m-%d").replace(hour=23, minute=59, second=59, microsecond=999999)
    
    logger.info(f"–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {start_date} - {end_date}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–≤–æ–Ω–∫–∏ –ø–æ –¥–∞—Ç–µ
    filtered_calls = []
    incoming_numbers = set()
    
    for call in json_data:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∑–≤–æ–Ω–∫–∞ –≤ datetime
            call_date = datetime.strptime(call['start'], "%Y-%m-%d %H:%M:%S")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –∑–≤–æ–Ω–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            if start_date <= call_date <= end_date:
                filtered_calls.append(call)
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ö–æ–¥—è—â–∏–π –Ω–æ–º–µ—Ä –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
                if call.get('type') == 'incoming':
                    incoming_number = call.get('diversion', '')
                    if incoming_number:
                        incoming_numbers.add(incoming_number)
        except (KeyError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–≤–æ–Ω–∫–∞: {str(e)}, –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞: {call}")
            continue
    
    logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: {len(filtered_calls)} –∏–∑ {len(json_data)}")
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤: {len(incoming_numbers)}")
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
    df = pd.DataFrame(filtered_calls)
    
    if df.empty:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return pd.DataFrame(), list(incoming_numbers)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –∏–º–µ–Ω–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞
    df['account_display'] = account_display
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ datetime
    df['start'] = pd.to_datetime(df['start'])
    df['end'] = pd.to_datetime(df['end'])
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    df['duration'] = (df['end'] - df['start']).dt.total_seconds()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É –∑–≤–æ–Ω–∫–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = df.groupby('type').agg({
        'duration': ['count', 'sum', 'mean'],
        'account_display': 'first'
    }).reset_index()
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
    stats.columns = ['type', 'count', 'total_duration', 'avg_duration', 'account_display']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ
    stats['start_date'] = start_date_str
    stats['end_date'] = end_date_str
    
    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats.to_dict('records')}")
    
    return stats, list(incoming_numbers)

async def send_excel(df, filename, chat_id, context: ContextTypes.DEFAULT_TYPE):
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
        df.to_excel(writer, index=False)
    buffer.seek(0)
    await context.bot.send_document(chat_id=chat_id, document=buffer, filename=filename)

async def send_plot(fig, chat_id, context: ContextTypes.DEFAULT_TYPE):
    buffer = BytesIO()
    fig.savefig(buffer, format="png", dpi=150)
    buffer.seek(0)
    await context.bot.send_photo(chat_id=chat_id, photo=buffer)
    plt.close(fig)

def get_period_dates(period, context):
    today = get_actual_now()
    
    if period == "today":
        # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å - —Ä–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        start_date = today.replace(hour=0, minute=0, second=0, microsecond=0)
        end_date = today.replace(hour=23, minute=59, second=59, microsecond=999999)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã —Å—Ä–∞–∑—É –≤ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        return start_date.strftime("%Y%m%d"), end_date.strftime("%Y%m%d")
    
    if period == "custom":
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏–∑ context.user_data
        start_date_str = context.user_data.get("custom_start_date")
        end_date_str = context.user_data.get("custom_end_date")
        
        if not start_date_str or not end_date_str:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
            
        try:
            start_date = datetime.strptime(start_date_str, "%Y-%m-%d")
            end_date = datetime.strptime(end_date_str, "%Y-%m-%d")
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
            
            if end_date < start_date:
                raise ValueError("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–Ω—è
            start_date = start_date.replace(hour=0, minute=0, second=0, microsecond=0)
            end_date = end_date.replace(hour=23, minute=59, second=59, microsecond=999999)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            return start_date.strftime("%Y%m%d"), end_date.strftime("%Y%m%d")
        except ValueError:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
            
    elif period == "current_month":
        # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        start_date = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        if today.month == 12:
            end_date = today.replace(year=today.year + 1, month=1, day=1, hour=23, minute=59, second=59) - timedelta(days=1)
        else:
            end_date = today.replace(month=today.month + 1, day=1, hour=23, minute=59, second=59) - timedelta(days=1)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        return start_date.strftime("%Y%m%d"), end_date.strftime("%Y%m%d")
        
    elif period == "previous_month":
        # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        if today.month == 1:
            start_date = today.replace(year=today.year - 1, month=12, day=1, hour=0, minute=0, second=0, microsecond=0)
            end_date = today.replace(year=today.year, month=1, day=1, hour=0, minute=0, second=0) - timedelta(seconds=1)
        else:
            start_date = today.replace(month=today.month - 1, day=1, hour=0, minute=0, second=0, microsecond=0)
            end_date = today.replace(month=today.month, day=1, hour=0, minute=0, second=0) - timedelta(seconds=1)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        return start_date.strftime("%Y%m%d"), end_date.strftime("%Y%m%d")
        
    elif period == "week":
        # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        end_date = today.replace(hour=23, minute=59, second=59)
        start_date = (end_date - timedelta(days=6)).replace(hour=0, minute=0, second=0, microsecond=0)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        return start_date.strftime("%Y%m%d"), end_date.strftime("%Y%m%d")
        
    elif period == "month":
        # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        end_date = today.replace(hour=23, minute=59, second=59)
        start_date = (end_date - timedelta(days=29)).replace(hour=0, minute=0, second=0, microsecond=0)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        return start_date.strftime("%Y%m%d"), end_date.strftime("%Y%m%d")
    
    elif period.startswith("quarter_"):
        # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã: quarter_2024_1, quarter_2024_2, etc.
        parts = period.split("_")
        if len(parts) == 3:
            year = int(parts[1])
            quarter = int(parts[2])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü—ã –∫–≤–∞—Ä—Ç–∞–ª–∞
            quarter_months = {
                1: (1, 3),   # –Ø–Ω–≤–∞—Ä—å-–ú–∞—Ä—Ç
                2: (4, 6),   # –ê–ø—Ä–µ–ª—å-–ò—é–Ω—å
                3: (7, 9),   # –ò—é–ª—å-–°–µ–Ω—Ç—è–±—Ä—å
                4: (10, 12)  # –û–∫—Ç—è–±—Ä—å-–î–µ–∫–∞–±—Ä—å
            }
            
            if quarter not in quarter_months:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–≤–∞—Ä—Ç–∞–ª: {quarter}")
                
            start_month, end_month = quarter_months[quarter]
            
            # –ù–∞—á–∞–ª–æ –∫–≤–∞—Ä—Ç–∞–ª–∞
            start_date = datetime(year, start_month, 1, 0, 0, 0)
            
            # –ö–æ–Ω–µ—Ü –∫–≤–∞—Ä—Ç–∞–ª–∞
            if end_month == 12:
                end_date = datetime(year + 1, 1, 1, 23, 59, 59) - timedelta(seconds=1)
            else:
                end_date = datetime(year, end_month + 1, 1, 23, 59, 59) - timedelta(seconds=1)
                
            return start_date.strftime("%Y%m%d"), end_date.strftime("%Y%m%d")
        
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {period}")

def get_period_dates_info(period, context):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–∏–æ–¥–µ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∏–∑ get_period_dates, —Ç–µ–ø–µ—Ä—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫ YYYYMMDD
        start_date_str, end_date_str = get_period_dates(period, context)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ YYYYMMDD –≤ –æ–±—ä–µ–∫—Ç—ã datetime –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        start_date = datetime.strptime(start_date_str, "%Y%m%d")
        end_date = datetime.strptime(end_date_str, "%Y%m%d")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        start_str = start_date.strftime("%d.%m.%Y")
        end_str = end_date.strftime("%d.%m.%Y")
        
        if period == "today":
            return f"–°–µ–≥–æ–¥–Ω—è: {start_str}"
        elif period == "current_month":
            return f"–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {start_str} - {end_str}"
        elif period == "previous_month":
            return f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü: {start_str} - {end_str}"
        elif period == "week":
            return f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {start_str} - {end_str}"
        elif period == "month":
            return f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: {start_str} - {end_str}"
        elif period == "custom":
            return f"–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {start_str} - {end_str}"
        elif period.startswith("quarter_"):
            # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            parts = period.split("_")
            if len(parts) == 3:
                year = int(parts[1])
                quarter = int(parts[2])
                quarter_names = {1: "I", 2: "II", 3: "III", 4: "IV"}
                quarter_name = quarter_names.get(quarter, str(quarter))
                return f"–ö–≤–∞—Ä—Ç–∞–ª {quarter_name} {year}: {start_str} - {end_str}"
        else:
            return f"–ü–µ—Ä–∏–æ–¥: {start_str} - {end_str}"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–∏–æ–¥–µ: {str(e)}")
        return f"–ü–µ—Ä–∏–æ–¥: {period}"

async def message_handler(update, context):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ message_handler –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")
        await update.message.reply_text("‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
        
    message_text = update.message.text
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –¥–∞—Ç
    if context.user_data.get("waiting_for_dates", False):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ –¥–∞—Ç: {message_text}")
        
        date_input_type = context.user_data.get("date_input_type", "range")
        
        if date_input_type == "range":
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ –¥–∞—Ç—ã
            date_parts = message_text.strip().split()
            
            if len(date_parts) != 2:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–≤–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –î–î.–ú–ú.–ì–ì–ì–ì",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_custom_period")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_period_selection")]
                    ])
                )
                return
                
            start_date_str, end_date_str = date_parts
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç
            try:
                start_date = datetime.strptime(start_date_str, "%d.%m.%Y")
                end_date = datetime.strptime(end_date_str, "%d.%m.%Y")
                
                # –£–±—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≥–æ–¥ –≤ –±—É–¥—É—â–µ–º
                
                if end_date < start_date:
                    await update.message.reply_text(
                        "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_custom_period")],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_period_selection")]
                        ])
                    )
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –¥–ª—è API
                context.user_data["custom_start_date"] = start_date.strftime("%Y-%m-%d")
                context.user_data["custom_end_date"] = end_date.strftime("%Y-%m-%d")
                
                await update.message.reply_text(
                    f"‚úÖ –ü–µ—Ä–∏–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —Å {start_date_str} –ø–æ {end_date_str}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_custom_period")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_period_selection")]
                    ])
                )
                
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –î–î.–ú–ú.–ì–ì–ì–ì",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_custom_period")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_period_selection")]
                    ])
                )
        
        else:  # date_input_type == "single"
            try:
                single_date = datetime.strptime(message_text.strip(), "%d.%m.%Y")
                
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≥–æ–¥ –≤ –±—É–¥—É—â–µ–º
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–Ω—É –∏ —Ç—É –∂–µ –¥–∞—Ç—É –∫–∞–∫ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
                date_str = single_date.strftime("%Y-%m-%d")
                context.user_data["custom_start_date"] = date_str
                context.user_data["custom_end_date"] = date_str
                
                await update.message.reply_text(
                    f"‚úÖ –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {single_date.strftime('%d.%m.%Y')}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_custom_period")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_period_selection")]
                    ])
                )
                
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_custom_period")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_period_selection")]
                    ])
                )
    else:
        # –ï—Å–ª–∏ –º—ã –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –¥–∞—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
        await start(update, context)

async def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.error(f"Update {update} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É {context.error}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
    if update and update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(context.error)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

def fetch_call_details(start_date: str, end_date: str, phone_number: str):
    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–≤–æ–Ω–∫–∞—Ö –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}, –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
    headers = {"X-API-KEY": API_KEY, "Content-Type": "application/json"}
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX
    phone = phone_number.strip()
    if phone and len(phone) >= 10:
        phone = re.sub(r'\D', '', phone)
        if len(phone) == 10:
            phone = '+7' + phone
        elif len(phone) == 11:
            if phone.startswith('7') or phone.startswith('8'):
                phone = '+7' + phone[1:]
            else:
                phone = '+' + phone
        else:
            phone = '+' + phone
        
        logger.debug(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –Ω–æ–º–µ—Ä: {phone_number} -> {phone}")
    else:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}")
        return []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è API –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    start_date_formatted = start_date
    end_date_formatted = end_date
    
    try:
        # –ï—Å–ª–∏ –¥–∞—Ç—ã —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if re.match(r'^\d{4}-\d{2}-\d{2}$', start_date) and re.match(r'^\d{4}-\d{2}-\d{2}$', end_date):
            start_date_formatted = start_date
            end_date_formatted = end_date
        # –ï—Å–ª–∏ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ YYYY-MM-DD
        elif re.match(r'^\d{8}$', start_date) and re.match(r'^\d{8}$', end_date):
            start_date_formatted = f"{start_date[:4]}-{start_date[4:6]}-{start_date[6:8]}"
            end_date_formatted = f"{end_date[:4]}-{end_date[4:6]}-{end_date[6:8]}"
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
            try:
                start_date_obj = datetime.strptime(start_date, "%Y%m%d")
                end_date_obj = datetime.strptime(end_date, "%Y%m%d")
                start_date_formatted = start_date_obj.strftime("%Y-%m-%d")
                end_date_formatted = end_date_obj.strftime("%Y-%m-%d")
            except ValueError:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç: {start_date}, {end_date}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞—Ç—ã
    
    logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è API: {start_date_formatted} - {end_date_formatted}")
    
    params = {
        "start": start_date_formatted,
        "end": end_date_formatted,
        "diversion": phone,
        "limit": 1000
    }
    
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {params}")
    
    try:
        response = requests.get(f"{API_URL}/history/json", headers=headers, params=params)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
        logger.info(f"API –∑–∞–ø—Ä–æ—Å: {API_URL}/history/json")
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–≤–æ–Ω–∫–∞–º –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
                if 'current_month' in str(params) or '2025-04-07' in str(params) or '2025-04-08' in str(params):
                    logger.info(f"–ü–û–õ–ù–´–ô –û–¢–í–ï–¢ API –¥–ª—è –¥–∞—Ç—ã 2025-04: {data}")
                
                # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –∑–≤–æ–Ω–∫–æ–≤
                call_types = {}
                for call in data:
                    call_type = call.get('type', 'unknown')
                    call_types[call_type] = call_types.get(call_type, 0) + 1
                
                logger.info(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ —Ç–∏–ø–∞–º: {call_types}")
                
                # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if data and len(data) > 0:
                    logger.info(f"–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞: {data[0]}")
                else:
                    logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ API –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone} –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date_formatted} - {end_date_formatted}")
                
                return data
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {str(e)}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {response.text[:500]}")
                return []
        else:
            try:
                logger.error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API —Å –æ—à–∏–±–∫–æ–π: {response.text}")
                error_data = response.json()
                error_msg = error_data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            except Exception:
                error_msg = f"HTTP-—Å—Ç–∞—Ç—É—Å: {response.status_code}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.text[:500]}"
            logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}, {error_msg}")
            return []
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}")
        return []
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return []

async def handle_incoming_numbers_excel(query, context, sheet_type, dept_number, period):
    logger.info(f"–ù–∞—á–∞–ª–æ –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤: —Ç–∏–ø={sheet_type}, –æ—Ç–¥–µ–ª={dept_number}, –ø–µ—Ä–∏–æ–¥={period}")
    
    try:
        # –ò–º—è –ª–∏—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        sheet_name = "–í—Ç–æ—Ä–∏—á–∫–∞" if sheet_type == "vtorichka" else "–ó–∞–≥–æ—Ä–æ–¥–∫–∞"

        await query.edit_message_text("üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...", reply_markup=None)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –∫—ç—à–∞
        employees = employee_provider.get_employees()
        filtered = employees
        
        if not filtered:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞", 
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD
            start_date_str, end_date_str = get_period_dates(period, context)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞: {start_date_str} - {end_date_str}")
            
            # –ù–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ fetch_call_history
            # —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –¥–ª—è API
            # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä–∏–æ–¥–æ–≤
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞—Ç–∞–º–∏: {start_date_str} - {end_date_str}")
                
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}", 
                                       reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ dept_number
        if dept_number == "None" or not dept_number or dept_number == "undefined":
            if context.user_data.get("selected_dept_number"):
                dept_number = context.user_data.get("selected_dept_number")
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –∏–∑ context.user_data['selected_dept_number']: {dept_number}")
            elif context.user_data.get("dept_number"):
                dept_number = context.user_data.get("dept_number")
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –∏–∑ context.user_data['dept_number']: {dept_number}")
        
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞: {dept_number}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –æ—Ç–¥–µ–ª–∞–º
        departments = {}
        for employee in filtered:
            dept = get_department_numbers(employee['department'])
            if dept:
                if dept not in departments:
                    departments[dept] = []
                if employee['sim'] and employee['sim'] != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
                    departments[dept].append({
                        'phone': employee['sim'],
                        'name': f"{employee['last_name']} {employee['first_name']}",
                        'department': employee['department']
                    })
        
        if not departments:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏")
            await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏", 
                                       reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–¥–µ–ª
        if dept_number != "all" and dept_number not in departments:
            logger.error(f"–û—Ç–¥–µ–ª {dept_number} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤: {list(departments.keys())}")
            await query.edit_message_text(f"‚ùå –û—Ç–¥–µ–ª {dept_number} –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return

        await query.edit_message_text("üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ö–æ–¥—è—â–∏—Ö –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö...", reply_markup=None)
        
        # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ö–æ–¥—è—â–∏—Ö –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö
        all_incoming_numbers = []
        all_phones_processed = 0
        phones_with_data = 0
        total_calls_found = 0  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
        total_incoming_calls = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
        total_missed_calls = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
        possible_phone_fields = ['phone', 'caller', 'caller_id', 'source', 'from', 'from_number', 'number', 'client']
        
        # –¢–µ–∫—É—â–∏–π –≥–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç
        current_year = get_actual_now().year
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞ –í–ê–¢–°
        logger.info(f"–¢–∏–ø —Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–≥–æ –æ—Ç—á–µ—Ç–∞: –≤—Ö–æ–¥—è—â–∏–µ –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞")
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ –í–ê–¢–° - –ø–µ—Ä–∏–æ–¥: {period} ({start_date_str} - {end_date_str}), –ª–∏—Å—Ç: {sheet_name}, –æ—Ç–¥–µ–ª: {dept_number}")
        
        if dept_number == "all":
            # –î–ª—è –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤ —Å–æ–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –æ—Ç–¥–µ–ª—É
            total_departments = len(departments)
            processed_departments = 0
            
            for dept_num, employees in departments.items():
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                processed_departments += 1
                progress = (processed_departments / total_departments) * 100
                progress_bar = "‚ñà" * int(progress / 2) + "‚ñë" * (50 - int(progress / 2))
                await query.edit_message_text(
                    f"üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ö–æ–¥—è—â–∏—Ö –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö...\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress:.1f}%\n"
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_departments}/{total_departments} –æ—Ç–¥–µ–ª–æ–≤\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {phones_with_data}/{all_phones_processed}\n"
                    f"–ù–∞–π–¥–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: {total_calls_found}, –∏–∑ –Ω–∏—Ö –≤—Ö–æ–¥—è—â–∏—Ö: {total_incoming_calls}, –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö: {total_missed_calls}",
                    reply_markup=None
                )
                
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª {dept_num} —Å {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")
                
                for employee in employees:
                    all_phones_processed += 1
                    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {employee['name']} ({employee['phone']})")
                    calls = fetch_call_history(start_date_str, end_date_str, employee['phone'])
                    if not calls:
                        logger.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {employee['phone']}")
                        continue
                        
                    total_calls_found += len(calls)
                    phones_with_data += 1
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(calls)} –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è {employee['phone']}")
                    
                    # –°—á–∏—Ç–∞–µ–º —Ç–∏–ø—ã –∑–≤–æ–Ω–∫–æ–≤
                    call_types = {}
                    for call in calls:
                        call_type = call.get('type', 'unknown')
                        call_types[call_type] = call_types.get(call_type, 0) + 1
                    
                    logger.info(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ —Ç–∏–ø–∞–º –¥–ª—è {employee['phone']}: {call_types}")
                    
                    for call in calls:
                        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        logger.debug(f"–î–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ: {call}")
                        
                        # –ò—â–µ–º –Ω–æ–º–µ—Ä –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö
                        incoming_number = None
                        for field in possible_phone_fields:
                            if field in call and call[field]:
                                incoming_number = call[field]
                                logger.debug(f"–ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –≤ –ø–æ–ª–µ {field}: {incoming_number}")
                                break
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–≤–æ–Ω–∫–∞
                        call_type = str(call.get('type', '')).lower()
                        
                        is_incoming = (
                            call_type in ['in', 'incoming', 'received', 'inbound', '–≤—Ö–æ–¥—è—â–∏–π'] or 
                            call.get('direction', '').lower() in ['in', 'incoming', 'received', 'inbound', '–≤—Ö–æ–¥—è—â–∏–π']
                        )
                        
                        is_missed = call_type in ['missed', '–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π']
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
                        if incoming_number and (is_incoming or is_missed):
                            if is_incoming:
                                total_incoming_calls += 1
                                call_type_display = "–í—Ö–æ–¥—è—â–∏–π üìû"
                            else:
                                total_missed_calls += 1
                                call_type_display = "–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π ‚ùå"
                                
                            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–º–µ—Ä: {incoming_number}, —Ç–∏–ø: {call_type_display}")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                            record_url = call.get('record', '')
                            user_name = call.get('user_name', '')
                            
                            # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞
                            call_datetime = ""
                            if 'start' in call and call['start']:
                                try:
                                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è —Ñ–æ—Ä–º–∞—Ç ISO
                                    raw_dt = call['start']
                                    logger.debug(f"–ò—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ –∏–∑ API: {raw_dt}")
                                    
                                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞ –≤ datetime
                                    dt = datetime.fromisoformat(raw_dt.replace('Z', '+00:00'))
                                    
                                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ–¥–∞ –≤ –±—É–¥—É—â–µ–º
                                    
                                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥
                                    call_datetime = dt.strftime("%d.%m.%Y %H:%M")
                                    logger.debug(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞: {call_datetime}")
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∑–≤–æ–Ω–∫–∞: {str(e)}")
                                    call_datetime = str(call.get('start', ''))
                            
                            logger.debug(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {record_url}")
                            logger.debug(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}")
                            logger.debug(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞: {call_datetime}")
                            
                            all_incoming_numbers.append({
                                '–û—Ç–¥–µ–ª/–ù–æ–º–µ—Ä': f"–û—Ç–¥–µ–ª {dept_num}",
                                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': user_name,
                                '–ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è–≤—à–µ–≥–æ': employee['phone'],
                                '–í—Ö–æ–¥—è—â–∏–π –Ω–æ–º–µ—Ä': incoming_number,
                                '–¢–∏–ø –∑–≤–æ–Ω–∫–∞': call_type_display,
                                '–î–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞': call_datetime,
                                '–ó–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞': record_url
                            })
        else:
            # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
            employees = departments.get(dept_number, [])
            if not employees:
                logger.error(f"–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_number}")
                await query.edit_message_text(f"‚ùå –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_number}", 
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
                )
                return
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª {dept_number} —Å {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")
            
            total_employees = len(employees)
            processed_employees = 0
            
            for employee in employees:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                processed_employees += 1
                all_phones_processed += 1
                progress = (processed_employees / total_employees) * 100
                progress_bar = "‚ñà" * int(progress / 2) + "‚ñë" * (50 - int(progress / 2))
                await query.edit_message_text(
                    f"üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ö–æ–¥—è—â–∏—Ö –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_number}...\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress:.1f}%\n"
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_employees}/{total_employees} –Ω–æ–º–µ—Ä–æ–≤\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {phones_with_data}/{all_phones_processed}\n"
                    f"–ù–∞–π–¥–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: {total_calls_found}, –∏–∑ –Ω–∏—Ö –≤—Ö–æ–¥—è—â–∏—Ö: {total_incoming_calls}, –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö: {total_missed_calls}",
                    reply_markup=None
                )
                
                logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {employee['name']} ({employee['phone']})")
                calls = fetch_call_history(start_date_str, end_date_str, employee['phone'])
                if not calls:
                    logger.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {employee['phone']}")
                    continue
                
                total_calls_found += len(calls)
                phones_with_data += 1
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(calls)} –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è {employee['phone']}")
                
                # –°—á–∏—Ç–∞–µ–º —Ç–∏–ø—ã –∑–≤–æ–Ω–∫–æ–≤
                call_types = {}
                for call in calls:
                    call_type = call.get('type', 'unknown')
                    call_types[call_type] = call_types.get(call_type, 0) + 1
                
                logger.info(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ —Ç–∏–ø–∞–º –¥–ª—è {employee['phone']}: {call_types}")
                
                for call in calls:
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    logger.debug(f"–î–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ: {call}")
                    
                    # –ò—â–µ–º –Ω–æ–º–µ—Ä –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö
                    incoming_number = None
                    for field in possible_phone_fields:
                        if field in call and call[field]:
                            incoming_number = call[field]
                            logger.debug(f"–ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –≤ –ø–æ–ª–µ {field}: {incoming_number}")
                            break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–≤–æ–Ω–∫–∞
                    call_type = str(call.get('type', '')).lower()
                    
                    is_incoming = (
                        call_type in ['in', 'incoming', 'received', 'inbound', '–≤—Ö–æ–¥—è—â–∏–π'] or 
                        call.get('direction', '').lower() in ['in', 'incoming', 'received', 'inbound', '–≤—Ö–æ–¥—è—â–∏–π']
                    )
                    
                    is_missed = call_type in ['missed', '–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π']
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
                    if incoming_number and (is_incoming or is_missed):
                        if is_incoming:
                            total_incoming_calls += 1
                            call_type_display = "–í—Ö–æ–¥—è—â–∏–π üìû"
                        else:
                            total_missed_calls += 1
                            call_type_display = "–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π ‚ùå"
                            
                        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–º–µ—Ä: {incoming_number}, —Ç–∏–ø: {call_type_display}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                        record_url = call.get('record', '')
                        user_name = call.get('user_name', '')
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞
                        call_datetime = ""
                        if 'start' in call and call['start']:
                            try:
                                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è —Ñ–æ—Ä–º–∞—Ç ISO
                                raw_dt = call['start']
                                logger.debug(f"–ò—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ –∏–∑ API: {raw_dt}")
                                
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞ –≤ datetime
                                dt = datetime.fromisoformat(raw_dt.replace('Z', '+00:00'))
                                
                                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ–¥–∞ –≤ –±—É–¥—É—â–µ–º
                                
                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥
                                call_datetime = dt.strftime("%d.%m.%Y %H:%M")
                                logger.debug(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞: {call_datetime}")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∑–≤–æ–Ω–∫–∞: {str(e)}")
                                call_datetime = str(call.get('start', ''))
                        
                        logger.debug(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {record_url}")
                        logger.debug(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}")
                        logger.debug(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞: {call_datetime}")
                        
                        employee_label = f"{employee['name']} ({employee['phone']})"
                        all_incoming_numbers.append({
                            '–û—Ç–¥–µ–ª/–ù–æ–º–µ—Ä': employee_label,
                            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': user_name,
                            '–ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è–≤—à–µ–≥–æ': employee['phone'],
                            '–í—Ö–æ–¥—è—â–∏–π –Ω–æ–º–µ—Ä': incoming_number,
                            '–¢–∏–ø –∑–≤–æ–Ω–∫–∞': call_type_display,
                            '–î–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞': call_datetime,
                            '–ó–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞': record_url
                        })
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {all_phones_processed}, —Å –¥–∞–Ω–Ω—ã–º–∏: {phones_with_data}")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: {total_calls_found}, –∏–∑ –Ω–∏—Ö –≤—Ö–æ–¥—è—â–∏—Ö: {total_incoming_calls}, –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö: {total_missed_calls}")
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç—á–µ—Ç: {len(all_incoming_numbers)}")
        
        if not all_incoming_numbers:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel-—Ñ–∞–π–ª–∞")
            # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await query.edit_message_text(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞\n\n"
                f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {all_phones_processed}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {phones_with_data}\n"
                f"–ù–∞–π–¥–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: {total_calls_found}, –∏–∑ –Ω–∏—Ö –≤—Ö–æ–¥—è—â–∏—Ö: {total_incoming_calls}, –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö: {total_missed_calls}\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {get_period_dates_info(period, context)}", 
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame(all_incoming_numbers)
        
        # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª —Å –æ–¥–Ω–∏–º –ª–∏—Å—Ç–æ–º
        buffer = BytesIO()
        with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
            df.to_excel(writer, sheet_name="–í—Ö–æ–¥—è—â–∏–µ –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ", index=False)
            
            # –î–µ–ª–∞–µ–º —Å—Å—ã–ª–∫–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏
            workbook = writer.book
            worksheet = writer.sheets["–í—Ö–æ–¥—è—â–∏–µ –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ"]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –∫ —Å—Ç–æ–ª–±—Ü—É "–ó–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"
            for idx, url in enumerate(df["–ó–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"], start=2):  # start=2 –ø–æ—Ç–æ–º—É —á—Ç–æ Excel –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1 –∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if url and isinstance(url, str) and (url.startswith("http://") or url.startswith("https://")):
                    cell = worksheet.cell(row=idx, column=df.columns.get_loc("–ó–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞") + 1)
                    cell.hyperlink = url
                    cell.style = "Hyperlink"
        
        buffer.seek(0)
        period_info = get_period_dates_info(period, context)
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
        filename = f"calls_{sheet_name.lower()}_{period_info.replace(':', '').replace(' ', '_').replace('/', '_')}.xlsx"
        
        await query.edit_message_text("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ Excel-—Ñ–∞–π–ª–∞...", reply_markup=None)
        await context.bot.send_document(chat_id=query.message.chat_id, document=buffer, filename=filename)
        await query.edit_message_text(f"‚úÖ Excel-—Ñ–∞–π–ª —Å –≤—Ö–æ–¥—è—â–∏–º–∏ –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–≤–æ–Ω–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({period_info})!", 
                                   reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∑–≤–æ–Ω–∫–æ–≤: {str(e)}")
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", 
                                   reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

async def handle_excel_format(query, context, df_stats, sheet_name, period):
    logger.info("–ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è Excel-—Ñ–∞–π–ª–∞")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
        report_type = context.user_data.get("report_type", "all")
        logger.info(f"–¢–∏–ø –æ—Ç—á–µ—Ç–∞ –≤ handle_excel_format: {report_type}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –∏–∑ context.user_data
        dept_number = context.user_data.get("selected_dept_number", "all")
        logger.info(f"–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –≤ handle_excel_format: {dept_number}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ
        period_info = get_period_dates_info(period, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if df_stats.empty:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel-—Ñ–∞–π–ª–∞")
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel-—Ñ–∞–π–ª–∞", 
                                       reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–¥–µ–ª
        if report_type != "all" and dept_number and dept_number != "all":
            filtered_df = df_stats[df_stats['–û—Ç–¥–µ–ª'] == dept_number]
            logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_number}")
            
            if filtered_df.empty:
                logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_number}")
                await query.edit_message_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_number}", 
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
                )
                return
            df_stats = filtered_df
        
        if report_type == "all":
            excel_df = pd.DataFrame()
            required_columns = ['–û—Ç–¥–µ–ª', '–í—Ö–æ–¥—è—â–∏–µ üìû', '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']
            for column in required_columns:
                if column not in df_stats.columns:
                    df_stats[column] = 0
            for dept in df_stats['–û—Ç–¥–µ–ª'].unique():
                dept_data = df_stats[df_stats['–û—Ç–¥–µ–ª'] == dept]
                dept_total = dept_data[['–í—Ö–æ–¥—è—â–∏–µ üìû', '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']].sum()
                num_employees = len(dept_data) if len(dept_data) else 1
                excel_df = pd.concat([excel_df, pd.DataFrame([{
                    '–û—Ç–¥–µ–ª': dept,
                    '–í—Ö–æ–¥—è—â–∏–µ üìû': f"{dept_total['–í—Ö–æ–¥—è—â–∏–µ üìû']} ({round(dept_total['–í—Ö–æ–¥—è—â–∏–µ üìû']/num_employees, 1)})",
                    '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§': f"{dept_total['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§']} ({round(dept_total['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§']/num_employees, 1)})",
                    '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå': f"{dept_total['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']} ({round(dept_total['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']/num_employees, 1)})"
                }])], ignore_index=True)
            total = df_stats[['–í—Ö–æ–¥—è—â–∏–µ üìû', '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']].sum()
            excel_df = pd.concat([excel_df, pd.DataFrame([{
                '–û—Ç–¥–µ–ª': '–ò–¢–û–ì–û –í–°–ï–ì–û',
                '–í—Ö–æ–¥—è—â–∏–µ üìû': total['–í—Ö–æ–¥—è—â–∏–µ üìû'],
                '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§': total['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'],
                '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå': total['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']
            }])], ignore_index=True)
        else:
            excel_df = df_stats.copy()
            # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º
            # –ü–µ—Ä–≤—ã–º —Å—Ç–æ–ª–±—Ü–æ–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            column_order = ['–°–æ—Ç—Ä—É–¥–Ω–∏–∫', '–û—Ç–¥–µ–ª', '–í—Ö–æ–¥—è—â–∏–µ üìû', '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå', '–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤']
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
            for col in column_order:
                if col not in excel_df.columns:
                    excel_df[col] = 0
            # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            excel_df = excel_df[column_order]
            
            for dept in df_stats['–û—Ç–¥–µ–ª'].unique():
                dept_data = df_stats[df_stats['–û—Ç–¥–µ–ª'] == dept]
                dept_total = dept_data[['–í—Ö–æ–¥—è—â–∏–µ üìû', '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']].sum()
                excel_df = pd.concat([excel_df, pd.DataFrame([{
                    '–°–æ—Ç—Ä—É–¥–Ω–∏–∫': f'–ò–¢–û–ì–û {dept}',
                    '–û—Ç–¥–µ–ª': dept,
                    '–í—Ö–æ–¥—è—â–∏–µ üìû': dept_total['–í—Ö–æ–¥—è—â–∏–µ üìû'],
                    '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§': dept_total['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'],
                    '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå': dept_total['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå'],
                    '–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤': dept_total['–í—Ö–æ–¥—è—â–∏–µ üìû'] + dept_total['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'] + dept_total['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']
                }])], ignore_index=True)
            total = df_stats[['–í—Ö–æ–¥—è—â–∏–µ üìû', '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']].sum()
            excel_df = pd.concat([excel_df, pd.DataFrame([{
                '–°–æ—Ç—Ä—É–¥–Ω–∏–∫': '–ò–¢–û–ì–û –í–°–ï–ì–û',
                '–û—Ç–¥–µ–ª': '',
                '–í—Ö–æ–¥—è—â–∏–µ üìû': total['–í—Ö–æ–¥—è—â–∏–µ üìû'],
                '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§': total['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'],
                '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå': total['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå'],
                '–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤': total['–í—Ö–æ–¥—è—â–∏–µ üìû'] + total['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'] + total['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']
            }])], ignore_index=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ –≤ –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"calls_stats_{sheet_name.lower()}_{period_info.replace(':', '').replace(' ', '_').replace('/', '_')}.xlsx"
        await send_excel(excel_df, filename, query.message.chat_id, context)
        await query.edit_message_text(f"‚úÖ Excel-—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({period_info})!", 
                                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞: {str(e)}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞: {str(e)}", 
                                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏
async def show_year_selection(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥–æ–¥–∞ –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    current_year = datetime.now().year
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –ª–µ—Ç
    for year in range(current_year, current_year - 3, -1):
        keyboard.append([InlineKeyboardButton(f"üìÖ {year} –≥–æ–¥", callback_data=f"year:{year}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    await query.edit_message_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_quarter_selection(query, context, year):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–≤–∞—Ä—Ç–∞–ª–∞ —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    current_year = datetime.now().year
    current_month = datetime.now().month
    current_quarter = (current_month - 1) // 3 + 1
    
    keyboard = []
    
    for quarter in range(1, 5):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–≤–∞—Ä—Ç–∞–ª–∞
        if year < current_year:
            # –ü—Ä–æ—à–µ–¥—à–∏–π –≥–æ–¥ - –≤—Å–µ –∫–≤–∞—Ä—Ç–∞–ª—ã –∑–µ–ª–µ–Ω—ã–µ
            icon = "‚úÖ"
        elif year == current_year:
            if quarter < current_quarter:
                # –ü—Ä–æ—à–µ–¥—à–∏–π –∫–≤–∞—Ä—Ç–∞–ª
                icon = "‚úÖ"
            elif quarter == current_quarter:
                # –¢–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª
                icon = "üü¢"
            else:
                # –ë—É–¥—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª
                icon = "‚ùå"
        else:
            # –ë—É–¥—É—â–∏–π –≥–æ–¥ - –≤—Å–µ –∫–≤–∞—Ä—Ç–∞–ª—ã –∫—Ä–∞—Å–Ω—ã–µ
            icon = "‚ùå"
        
        quarter_name = f"{quarter} –∫–≤–∞—Ä—Ç–∞–ª"
        keyboard.append([InlineKeyboardButton(f"{icon} {quarter_name}", callback_data=f"quarter:{year}:{quarter}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"quarter:{context.user_data.get('report_type', 'quarter_3sheets')}")])
    
    await query.edit_message_text(
        f"üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∞–ª –¥–ª—è {year} –≥–æ–¥–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def generate_quarter_report(query, context, year, quarter):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        report_type = context.user_data.get("report_type")
        sheet_type = context.user_data.get("sheet_type", "")
        dept_number = context.user_data.get("dept_number", "all")
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª–∞
        period = f"quarter_{year}_{quarter}"
        
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: –≥–æ–¥={year}, –∫–≤–∞—Ä—Ç–∞–ª={quarter}, –æ—Ç–¥–µ–ª={dept_number}, –ª–∏—Å—Ç={sheet_type}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º handle_report_format –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        await handle_report_format(query, context, sheet_type, dept_number, period, "excel")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

# –î–æ–±–∞–≤–ª—è—é/–ø–µ—Ä–µ–º–µ—â–∞—é —Ñ—É–Ω–∫—Ü–∏—é update_employees_command –≤—ã—à–µ main
async def update_employees_command(update, context):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
    try:
        employee_provider.update_cache(force=True)
        await update.message.reply_text("‚úÖ –ö—ç—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")

def main():
    global bot_application
    
    application = Application.builder().token("8083344307:AAEwLJNPEoPRKxEUXJaXoHgqpTa6k3lA5_k").build()
    bot_application = application
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("update_employees", update_employees_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_error_handler(error_handler)
    
    async def on_startup(app):
        # –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        try:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, employee_provider.update_cache, True)
            logger.info("‚úÖ –ö—ç—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
    
    application.post_init = on_startup
    
    application.run_polling()

if __name__ == "__main__":
    main() 