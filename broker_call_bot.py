import os
import logging
import requests
import pandas as pd
import matplotlib.pyplot as plt
import calendar
from datetime import datetime, timedelta
from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import json
import re
from tqdm import tqdm
from prettytable import PrettyTable
from colorama import init, Fore, Style
import numpy as np
import matplotlib
matplotlib.use('Agg')
import asyncio
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é EmployeeDataProvider
from employee_data_provider import EmployeeDataProvider

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞)
def get_actual_now():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É.
    """
    return datetime.now()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –í–ê–¢–°
API_KEY = "d1b0ef65-e491-43f9-967b-df67d4657dbb"
API_URL = "https://leto.megapbx.ru/crmapi/v1"

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ALLOWED_USERS = [194530, 368752085, 261337953, 702018715]

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
AUTO_REPORT_USER_ID = 194530

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ (–Ω—É–∂–Ω–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
bot_application = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–≥–ª–æ–±–∞–ª—å–Ω–æ)
EMPLOYEE_API_TOKEN = "a4d4a75094d8f9d8597085ac0ac12a51"
employee_provider = EmployeeDataProvider(EMPLOYEE_API_TOKEN)

def setup_logging():
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    logging.getLogger().addHandler(logging.NullHandler())
    return logging.getLogger()

def get_department_numbers(department):
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª–∞: {department}")
    if not department:
        return None
    try:
        if isinstance(department, (int, float)):
            return str(int(department))
        
        department = str(department)
        department = re.sub(r'[^\d]', '', department)
        result = department if department else None
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–¥–µ–ª–∞: {result}")
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–¥–µ–ª–∞ '{department}': {str(e)}")
        return None

async def start(update, context):
    user = update.effective_user
    user_id = user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    if user_id not in ALLOWED_USERS:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")
        await update.message.reply_text("‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–¥–µ–ª–æ–≤!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    keyboard = [
        [InlineKeyboardButton("üìã –û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º", callback_data="report:all")],
        [InlineKeyboardButton("üìä –û—Ç—á—ë—Ç –ø–æ –æ—Ç–¥–µ–ª–∞–º", callback_data="report:by")],
        [InlineKeyboardButton("üìÖ –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data="quarter:3sheets")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à", callback_data="update_employees")]
    ]
    await update.message.reply_text(welcome_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def button_callback(update, context):
    query = update.callback_query
    data = query.data
    
    logger.info(f"Callback received: {data}")
    
    if data == "back_to_main":
        await show_main_menu(update, context)
        return
        
    if data == "update_employees":
        await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
        try:
            employee_provider.update_cache(force=True)
            await query.edit_message_text("‚úÖ –ö—ç—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")]
            ]))
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")]
            ]))
        return
        
    if data == "report:all":
        context.user_data["report_type"] = "all"
        context.user_data["dept_number"] = "all"
        await show_period_selection(query, context, sheet_type="vtorichka", report_type="all")
        return
        
    if data == "report:by":
        context.user_data["report_type"] = "by"
        await show_department_list(query, context, sheet_type="vtorichka", report_type="by")
        return
        
    if data.startswith("dept:"):
        dept_data = data.split(":")
        if len(dept_data) >= 2:
            dept_number = dept_data[1]
            context.user_data["dept_number"] = str(dept_number)
            context.user_data["selected_dept_number"] = str(dept_number)
            await show_period_selection(query, context, sheet_type="vtorichka", report_type="by")
            return
            
    if data.startswith("period:"):
        period = data.split(":")[1]
        sheet_type = context.user_data.get("sheet_type", "")
        report_type = context.user_data.get("report_type", "")
        dept_number = context.user_data.get("dept_number", "all")
        
        logger.info(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: {period}, sheet_type: {sheet_type}, report_type: {report_type}, dept_number: {dept_number}")
        
        context.user_data["period"] = period
        await show_format_selection(query, context, sheet_type, report_type, dept_number, period)
        return
        
    if data.startswith("format:"):
        format_type = data.split(":")[1]
        sheet_type = context.user_data.get("sheet_type", "")
        report_type = context.user_data.get("report_type", "")
        dept_number = context.user_data.get("dept_number", "all")
        period = context.user_data.get("period", "")
        
        logger.info(f"–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç: {format_type}, sheet_type: {sheet_type}, report_type: {report_type}, dept_number: {dept_number}, period: {period}")
        
        if format_type == "incoming":
            await handle_incoming_numbers_excel(query, context, sheet_type, dept_number, period)
        else:
            await handle_report_format(query, context, sheet_type, dept_number, period, format_type)
        return
        
    if data.startswith("quarter:"):
        sheets_type = data.split(":")[1]
        context.user_data["sheets_type"] = sheets_type
        await show_year_selection(query, context)
        return
        
    if data.startswith("year:"):
        year = int(data.split(":")[1])
        context.user_data["year"] = year
        await show_quarter_selection(query, context, year)
        return
        
    if data.startswith("quarter:"):
        parts = data.split(":")
        if len(parts) == 3:
            year = int(parts[1])
            quarter = int(parts[2])
            await generate_quarter_report(query, context, year, quarter)
        return
        
    await query.edit_message_text(
        f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
    )

async def show_main_menu(update, context):
    welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–¥–µ–ª–æ–≤!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    keyboard = [
        [InlineKeyboardButton("üìã –û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º", callback_data="report:all")],
        [InlineKeyboardButton("üìä –û—Ç—á—ë—Ç –ø–æ –æ—Ç–¥–µ–ª–∞–º", callback_data="report:by")],
        [InlineKeyboardButton("üìÖ –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data="quarter:3sheets")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à", callback_data="update_employees")]
    ]
    await update.callback_query.edit_message_text(welcome_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_period_selection(query, context, sheet_type, report_type):
    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞—é –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è sheet_type={sheet_type}, report_type={report_type}")
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="period:today")],
        [InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="period:current_month")],
        [InlineKeyboardButton("üìÖ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", callback_data="period:previous_month")],
        [InlineKeyboardButton("üìÖ –ó–∞ 7 –¥–Ω–µ–π", callback_data="period:week")],
        [InlineKeyboardButton("üìÖ –ó–∞ 30 –¥–Ω–µ–π", callback_data="period:month")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    await query.edit_message_text(
        f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_department_list(query, context, sheet_type, report_type):
    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤ –¥–ª—è sheet_type={sheet_type}, report_type={report_type}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –∫—ç—à–∞
    employees = employee_provider.get_employees()
    filtered = employees
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–¥–µ–ª–∞–º
    departments = {}
    import re
    for emp in filtered:
        dept_raw = emp['department']
        match = re.search(r'(\d+)', str(dept_raw))
        if match:
            dept = str(int(match.group(1)))
            if dept not in departments:
                departments[dept] = []
            departments[dept].append({
                'phone': emp['sim'],
                'name': f"{emp['last_name']} {emp['first_name']}",
                'department': emp['department']
            })
    
    if not departments:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏")
        await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏", 
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        return
        
    keyboard = []
    for dept_number in sorted(departments.keys(), key=int):
        callback_data = f"dept:{dept_number}"
        keyboard.append([InlineKeyboardButton(f"–û—Ç–¥–µ–ª {dept_number} ({len(departments[dept_number])} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)", callback_data=callback_data)])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    await query.edit_message_text(
        f"üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_format_selection(query, context, sheet_type, report_type, dept_number, period):
    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞—é –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è sheet_type={sheet_type}, report_type={report_type}, dept_number={dept_number}, period={period}")
    
    keyboard = [
        [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫", callback_data="format:plot")],
        [InlineKeyboardButton("üìã –¢–∞–±–ª–∏—Ü–∞", callback_data="format:table")],
        [InlineKeyboardButton("üìë Excel", callback_data="format:excel")],
        [InlineKeyboardButton("üìû –í—Ö–æ–¥—è—â–∏–µ –Ω–æ–º–µ—Ä–∞", callback_data="format:incoming")],
        [InlineKeyboardButton("üìä –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã", callback_data="format:all")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    await query.edit_message_text(
        f"üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_report_format(query, context, sheet_type, dept_number, period, format_type):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: —Ç–∏–ø={sheet_type}, –æ—Ç–¥–µ–ª={dept_number}, –ø–µ—Ä–∏–æ–¥={period}, —Ñ–æ—Ä–º–∞—Ç={format_type}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –∫—ç—à–∞
        employees = employee_provider.get_employees()
        filtered = employees
        
        if not filtered:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞", 
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞
        try:
            start_date_str, end_date_str = get_period_dates(period, context)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞: {start_date_str} - {end_date_str}")
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}", 
                                       reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–¥–µ–ª
        if dept_number != "all":
            filtered_employees = []
            for employee in filtered:
                emp_dept = get_department_numbers(employee['department'])
                if emp_dept == dept_number:
                    filtered_employees.append(employee)
            filtered = filtered_employees
            logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_number}")

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        all_stats = []
        total_employees = len(filtered)
        current_employee = 0
        
        for employee in filtered:
            if not employee.get('sim') or employee['sim'] == '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
                continue
            
            current_employee += 1
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–æ–≤
            data = fetch_call_history(start_date_str, end_date_str, employee['sim'])
            if not data:
                continue
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            df = pd.DataFrame(data)
            if not df.empty:
                incoming_types = ['in', 'incoming', 'received', 'inbound', '–≤—Ö–æ–¥—è—â–∏–π']
                outgoing_types = ['out', 'outgoing', '–∏—Å—Ö–æ–¥—è—â–∏–π']
                missed_statuses = ['noanswer', 'missed', '–ø—Ä–æ–ø—É—â–µ–Ω', '–Ω–µ–æ—Ç–≤–µ—á–µ–Ω', '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞']

                incoming_count = df[df['type'].str.lower().isin(incoming_types)].shape[0]
                outgoing_count = df[df['type'].str.lower().isin(outgoing_types)].shape[0]
                missed_count = df[df['status'].str.lower().isin(missed_statuses)].shape[0] if 'status' in df.columns else 0
                
                stats_dict = {
                    '–°–æ—Ç—Ä—É–¥–Ω–∏–∫': f"{employee.get('last_name', '')} {employee.get('first_name', '')}".strip(),
                    '–û—Ç–¥–µ–ª': get_department_numbers(employee['department']),
                    '–í—Ö–æ–¥—è—â–∏–µ üìû': incoming_count,
                    '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§': outgoing_count,
                    '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå': missed_count,
                    '–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤': len(data)
                }
                all_stats.append(stats_dict)

        if not all_stats:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞", 
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df_stats = pd.DataFrame(all_stats)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
        if format_type == "all":
            await handle_table_format(query, context, all_stats, "–û—Ç—á–µ—Ç")
            await handle_plot_format(query, context, df_stats, "–û—Ç—á–µ—Ç")
            await handle_excel_format(query, context, df_stats, "–û—Ç—á–µ—Ç", period)
            period_info = get_period_dates_info(period, context)
            await query.edit_message_text(f"‚úÖ –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! ({period_info})", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        elif format_type == "excel":
            await handle_excel_format(query, context, df_stats, "–û—Ç—á–µ—Ç", period)
        elif format_type == "plot":
            await handle_plot_format(query, context, df_stats, "–û—Ç—á–µ—Ç")
        elif format_type == "table":
            await handle_table_format(query, context, all_stats, "–û—Ç—á–µ—Ç")
        elif format_type == "incoming":
            await handle_incoming_numbers_excel(query, context, sheet_type, dept_number, period)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

async def handle_table_format(query, context, all_stats, sheet_name):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        table = PrettyTable()
        table.field_names = ["–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–û—Ç–¥–µ–ª", "–í—Ö–æ–¥—è—â–∏–µ", "–ò—Å—Ö–æ–¥—è—â–∏–µ", "–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ", "–í—Å–µ–≥–æ"]
        
        for stats in all_stats:
            table.add_row([
                stats['–°–æ—Ç—Ä—É–¥–Ω–∏–∫'],
                stats['–û—Ç–¥–µ–ª'],
                stats['–í—Ö–æ–¥—è—â–∏–µ üìû'],
                stats['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'],
                stats['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå'],
                stats['–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤']
            ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        await query.edit_message_text(f"üìã –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—á–µ—Ç–∞:\n\n`{table}`", parse_mode=ParseMode.MARKDOWN,
                                   reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}", 
                                   reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

async def handle_plot_format(query, context, df_stats, sheet_name):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º
        dept_stats = df_stats.groupby('–û—Ç–¥–µ–ª').agg({
            '–í—Ö–æ–¥—è—â–∏–µ üìû': 'sum',
            '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§': 'sum',
            '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå': 'sum'
        }).reset_index()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        x = range(len(dept_stats))
        width = 0.25
        
        ax.bar([i - width for i in x], dept_stats['–í—Ö–æ–¥—è—â–∏–µ üìû'], width, label='–í—Ö–æ–¥—è—â–∏–µ', color='green')
        ax.bar(x, dept_stats['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'], width, label='–ò—Å—Ö–æ–¥—è—â–∏–µ', color='blue')
        ax.bar([i + width for i in x], dept_stats['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå'], width, label='–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ', color='red')
        
        ax.set_xlabel('–û—Ç–¥–µ–ª—ã')
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤')
        ax.set_title(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –æ—Ç–¥–µ–ª–∞–º')
        ax.set_xticks(x)
        ax.set_xticklabels(dept_stats['–û—Ç–¥–µ–ª'])
        ax.legend()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        await send_plot(fig, query.message.chat_id, context)
        await query.edit_message_text("üìä –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", 
                                   reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}", 
                                   reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

async def handle_excel_format(query, context, df_stats, sheet_name, period):
    logger.info("–ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è Excel-—Ñ–∞–π–ª–∞")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
        report_type = context.user_data.get("report_type", "all")
        logger.info(f"–¢–∏–ø –æ—Ç—á–µ—Ç–∞ –≤ handle_excel_format: {report_type}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –∏–∑ context.user_data
        dept_number = context.user_data.get("selected_dept_number", "all")
        logger.info(f"–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –≤ handle_excel_format: {dept_number}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ
        period_info = get_period_dates_info(period, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if df_stats.empty:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel-—Ñ–∞–π–ª–∞")
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel-—Ñ–∞–π–ª–∞", 
                                       reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–¥–µ–ª
        if report_type != "all" and dept_number and dept_number != "all":
            filtered_df = df_stats[df_stats['–û—Ç–¥–µ–ª'] == dept_number]
            logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_number}")
            
            if filtered_df.empty:
                logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_number}")
                await query.edit_message_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_number}", 
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
                )
                return
            df_stats = filtered_df
        
        if report_type == "all":
            excel_df = pd.DataFrame()
            required_columns = ['–û—Ç–¥–µ–ª', '–í—Ö–æ–¥—è—â–∏–µ üìû', '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']
            for column in required_columns:
                if column not in df_stats.columns:
                    df_stats[column] = 0
            for dept in df_stats['–û—Ç–¥–µ–ª'].unique():
                dept_data = df_stats[df_stats['–û—Ç–¥–µ–ª'] == dept]
                dept_total = dept_data[['–í—Ö–æ–¥—è—â–∏–µ üìû', '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']].sum()
                num_employees = len(dept_data) if len(dept_data) else 1
                excel_df = pd.concat([excel_df, pd.DataFrame([{
                    '–û—Ç–¥–µ–ª': dept,
                    '–í—Ö–æ–¥—è—â–∏–µ üìû': f"{dept_total['–í—Ö–æ–¥—è—â–∏–µ üìû']} ({round(dept_total['–í—Ö–æ–¥—è—â–∏–µ üìû']/num_employees, 1)})",
                    '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§': f"{dept_total['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§']} ({round(dept_total['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§']/num_employees, 1)})",
                    '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå': f"{dept_total['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']} ({round(dept_total['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']/num_employees, 1)})"
                }])], ignore_index=True)
            total = df_stats[['–í—Ö–æ–¥—è—â–∏–µ üìû', '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']].sum()
            excel_df = pd.concat([excel_df, pd.DataFrame([{
                '–û—Ç–¥–µ–ª': '–ò–¢–û–ì–û –í–°–ï–ì–û',
                '–í—Ö–æ–¥—è—â–∏–µ üìû': total['–í—Ö–æ–¥—è—â–∏–µ üìû'],
                '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§': total['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'],
                '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå': total['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']
            }])], ignore_index=True)
        else:
            excel_df = df_stats.copy()
            # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º
            # –ü–µ—Ä–≤—ã–º —Å—Ç–æ–ª–±—Ü–æ–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            column_order = ['–°–æ—Ç—Ä—É–¥–Ω–∏–∫', '–û—Ç–¥–µ–ª', '–í—Ö–æ–¥—è—â–∏–µ üìû', '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå', '–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤']
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
            for col in column_order:
                if col not in excel_df.columns:
                    excel_df[col] = 0
            # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            excel_df = excel_df[column_order]
            
            for dept in df_stats['–û—Ç–¥–µ–ª'].unique():
                dept_data = df_stats[df_stats['–û—Ç–¥–µ–ª'] == dept]
                dept_total = dept_data[['–í—Ö–æ–¥—è—â–∏–µ üìû', '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']].sum()
                excel_df = pd.concat([excel_df, pd.DataFrame([{
                    '–°–æ—Ç—Ä—É–¥–Ω–∏–∫': f'–ò–¢–û–ì–û {dept}',
                    '–û—Ç–¥–µ–ª': dept,
                    '–í—Ö–æ–¥—è—â–∏–µ üìû': dept_total['–í—Ö–æ–¥—è—â–∏–µ üìû'],
                    '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§': dept_total['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'],
                    '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå': dept_total['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå'],
                    '–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤': dept_total['–í—Ö–æ–¥—è—â–∏–µ üìû'] + dept_total['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'] + dept_total['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']
                }])], ignore_index=True)
            total = df_stats[['–í—Ö–æ–¥—è—â–∏–µ üìû', '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']].sum()
            excel_df = pd.concat([excel_df, pd.DataFrame([{
                '–°–æ—Ç—Ä—É–¥–Ω–∏–∫': '–ò–¢–û–ì–û –í–°–ï–ì–û',
                '–û—Ç–¥–µ–ª': '',
                '–í—Ö–æ–¥—è—â–∏–µ üìû': total['–í—Ö–æ–¥—è—â–∏–µ üìû'],
                '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§': total['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'],
                '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå': total['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå'],
                '–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤': total['–í—Ö–æ–¥—è—â–∏–µ üìû'] + total['–ò—Å—Ö–æ–¥—è—â–∏–µ üì§'] + total['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå']
            }])], ignore_index=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ –≤ –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"calls_stats_{sheet_name.lower()}_{period_info.replace(':', '').replace(' ', '_').replace('/', '_')}.xlsx"
        await send_excel(excel_df, filename, query.message.chat_id, context)
        await query.edit_message_text(f"‚úÖ Excel-—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({period_info})!", 
                                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞: {str(e)}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞: {str(e)}", 
                                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏
async def show_year_selection(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥–æ–¥–∞ –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    current_year = datetime.now().year
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –ª–µ—Ç
    for year in range(current_year, current_year - 3, -1):
        keyboard.append([InlineKeyboardButton(f"üìÖ {year} –≥–æ–¥", callback_data=f"year:{year}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    await query.edit_message_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_quarter_selection(query, context, year):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–≤–∞—Ä—Ç–∞–ª–∞ —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    current_year = datetime.now().year
    current_month = datetime.now().month
    current_quarter = (current_month - 1) // 3 + 1
    
    keyboard = []
    
    for quarter in range(1, 5):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–≤–∞—Ä—Ç–∞–ª–∞
        if year < current_year:
            # –ü—Ä–æ—à–µ–¥—à–∏–π –≥–æ–¥ - –≤—Å–µ –∫–≤–∞—Ä—Ç–∞–ª—ã –∑–µ–ª–µ–Ω—ã–µ
            icon = "‚úÖ"
        elif year == current_year:
            if quarter < current_quarter:
                # –ü—Ä–æ—à–µ–¥—à–∏–π –∫–≤–∞—Ä—Ç–∞–ª
                icon = "‚úÖ"
            elif quarter == current_quarter:
                # –¢–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª
                icon = "üü¢"
            else:
                # –ë—É–¥—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª
                icon = "‚ùå"
        else:
            # –ë—É–¥—É—â–∏–π –≥–æ–¥ - –≤—Å–µ –∫–≤–∞—Ä—Ç–∞–ª—ã –∫—Ä–∞—Å–Ω—ã–µ
            icon = "‚ùå"
        
        quarter_name = f"{quarter} –∫–≤–∞—Ä—Ç–∞–ª"
        keyboard.append([InlineKeyboardButton(f"{icon} {quarter_name}", callback_data=f"quarter:{year}:{quarter}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"quarter:{context.user_data.get('report_type', 'quarter_3sheets')}")])
    
    await query.edit_message_text(
        f"üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∞–ª –¥–ª—è {year} –≥–æ–¥–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def generate_quarter_report(query, context, year, quarter):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    logger.info(f"=== –ù–ê–ß–ê–õ–û generate_quarter_report: –≥–æ–¥={year}, –∫–≤–∞—Ä—Ç–∞–ª={quarter} ===")
    try:
        report_type = context.user_data.get("report_type")
        sheet_type = context.user_data.get("sheet_type", "")
        dept_number = context.user_data.get("dept_number", "all")
        sheets_type = context.user_data.get("sheets_type", "1sheet")  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ª–∏—Å—Ç–æ–≤
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª–∞
        period = f"quarter_{year}_{quarter}"
        
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: –≥–æ–¥={year}, –∫–≤–∞—Ä—Ç–∞–ª={quarter}, –æ—Ç–¥–µ–ª={dept_number}, –ª–∏—Å—Ç={sheet_type}, —Ç–∏–ø –ª–∏—Å—Ç–æ–≤={sheets_type}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        logger.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        await query.edit_message_text("üîÑ –§–æ—Ä–º–∏—Ä—É—é –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...", reply_markup=None)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–∫–∞–∑–∞–Ω–æ")
        
        if sheets_type == "3sheets":
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç —Å 3 –ª–∏—Å—Ç–∞–º–∏ (–ø–æ –º–µ—Å—è—Ü–∞–º)
            await create_quarter_report_3sheets(query, context, year, quarter, sheet_type, dept_number, period)
        else:
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç —Å 1 –ª–∏—Å—Ç–æ–º (–≤–µ—Å—å –∫–≤–∞—Ä—Ç–∞–ª)
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä skip_loading=True, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            await handle_report_format_quarter(query, context, sheet_type, dept_number, period, "excel")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

async def handle_report_format_quarter(query, context, sheet_type, dept_number, period, format_type):
    """–í–µ—Ä—Å–∏—è handle_report_format –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    sheet_name = '–í—Å–µ –æ—Ç–¥–µ–ª—ã'
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: —Ç–∏–ø={sheet_type}, –æ—Ç–¥–µ–ª={dept_number}, –ø–µ—Ä–∏–æ–¥={period}, —Ñ–æ—Ä–º–∞—Ç={format_type}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –æ—Ç–¥–µ–ª–∞ –∏–∑ context.user_data
    if dept_number == "None" or not dept_number or dept_number == "undefined":
        if context.user_data.get("selected_dept_number"):
            dept_number = context.user_data.get("selected_dept_number")
            logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –∏–∑ context.user_data['selected_dept_number']: {dept_number}")
        elif context.user_data.get("dept_number"):
            dept_number = context.user_data.get("dept_number")
            logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –∏–∑ context.user_data['dept_number']: {dept_number}")
    
    logger.info(f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {dept_number}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –∫—ç—à–∞
        employees = employee_provider.get_employees()
        filtered = employees
        
        if not filtered:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞", 
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –æ—Ç–¥–µ–ª–∞–º
        departments = {}
        import re
        for employee in filtered:
            dept_raw = employee['department']
            match = re.search(r'(\d+)', str(dept_raw))
            if match:
                dept = str(int(match.group(1)))
                if dept not in departments:
                    departments[dept] = []
                departments[dept].append({
                    'phone': employee['sim'],
                    'name': f"{employee['last_name']} {employee['first_name']}",
                    'department': employee['department']
                })

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(departments)} –æ—Ç–¥–µ–ª–æ–≤: {list(departments.keys())}")
        
        if not departments:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏")
            await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return

        try:
            actual_period = context.user_data.get("period", period)
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥: {actual_period}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD
            start_date_str, end_date_str = get_period_dates(actual_period, context)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞: {start_date_str} - {end_date_str}")
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞—Ç–∞–º–∏: {start_date_str} - {end_date_str}")
            
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ context.user_data
        report_type = context.user_data.get("report_type", "all")
        logger.info(f"–¢–∏–ø –æ—Ç—á–µ—Ç–∞ –≤ handle_report_format_quarter: {report_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞
        if not dept_number or dept_number == "None" or dept_number == "all" or dept_number == "undefined":
            if report_type != "all":
                logger.error(f"–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞ —Ç–∏–ø–∞ {report_type}")
                await query.edit_message_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞", 
                                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
                )
                return
            dept_number = "all"
        
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞: {dept_number}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞
        if dept_number != "all" and dept_number not in departments:
            logger.error(f"–û—Ç–¥–µ–ª {dept_number} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤: {list(departments.keys())}")
            await query.edit_message_text(f"‚ùå –û—Ç–¥–µ–ª {dept_number} –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–¥–µ–ª
        if dept_number != "all":
            filtered_employees = []
            for employee in filtered:
                emp_dept = get_department_numbers(employee['department'])
                if emp_dept == dept_number:
                    filtered_employees.append(employee)
            filtered = filtered_employees
            logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_number}")

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        all_stats = []
        total_employees = len(filtered)
        current_employee = 0
        
        for employee in filtered:
            if not employee.get('sim') or employee['sim'] == '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
                continue
            
            current_employee += 1
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–æ–≤
            data = fetch_call_history(start_date_str, end_date_str, employee['sim'])
            if not data:
                continue
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            df = pd.DataFrame(data)
            if not df.empty:
                incoming_types = ['in', 'incoming', 'received', 'inbound', '–≤—Ö–æ–¥—è—â–∏–π']
                outgoing_types = ['out', 'outgoing', '–∏—Å—Ö–æ–¥—è—â–∏–π']
                missed_statuses = ['noanswer', 'missed', '–ø—Ä–æ–ø—É—â–µ–Ω', '–Ω–µ–æ—Ç–≤–µ—á–µ–Ω', '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞']

                incoming_count = df[df['type'].str.lower().isin(incoming_types)].shape[0]
                outgoing_count = df[df['type'].str.lower().isin(outgoing_types)].shape[0]
                missed_count = df[df['status'].str.lower().isin(missed_statuses)].shape[0] if 'status' in df.columns else 0
                
                stats_dict = {
                    '–°–æ—Ç—Ä—É–¥–Ω–∏–∫': f"{employee.get('last_name', '')} {employee.get('first_name', '')}".strip(),
                    '–û—Ç–¥–µ–ª': get_department_numbers(employee['department']),
                    '–í—Ö–æ–¥—è—â–∏–µ üìû': incoming_count,
                    '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§': outgoing_count,
                    '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå': missed_count,
                    '–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤': len(data)
                }
                all_stats.append(stats_dict)

        if not all_stats:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞", 
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df_stats = pd.DataFrame(all_stats)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
        if format_type == "all":
            await handle_table_format(query, context, all_stats, "–û—Ç—á–µ—Ç")
            await handle_plot_format(query, context, df_stats, "–û—Ç—á–µ—Ç")
            await handle_excel_format(query, context, df_stats, "–û—Ç—á–µ—Ç", period)
            period_info = get_period_dates_info(period, context)
            await query.edit_message_text(f"‚úÖ –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! ({period_info})", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        elif format_type == "excel":
            await handle_excel_format(query, context, df_stats, "–û—Ç—á–µ—Ç", period)
        elif format_type == "plot":
            await handle_plot_format(query, context, df_stats, "–û—Ç—á–µ—Ç")
        elif format_type == "table":
            await handle_table_format(query, context, all_stats, "–û—Ç—á–µ—Ç")
        elif format_type == "incoming":
            await handle_incoming_numbers_excel(query, context, sheet_type, dept_number, period)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

async def create_quarter_report_3sheets(query, context, year, quarter, sheet_type, dept_number, period):
    """–°–æ–∑–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å 3 –ª–∏—Å—Ç–∞–º–∏ (–ø–æ –º–µ—Å—è—Ü–∞–º)"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü—ã –∫–≤–∞—Ä—Ç–∞–ª–∞
        quarter_months = {
            1: [("–Ø–Ω–≤–∞—Ä—å", 1), ("–§–µ–≤—Ä–∞–ª—å", 2), ("–ú–∞—Ä—Ç", 3)],
            2: [("–ê–ø—Ä–µ–ª—å", 4), ("–ú–∞–π", 5), ("–ò—é–Ω—å", 6)],
            3: [("–ò—é–ª—å", 7), ("–ê–≤–≥—É—Å—Ç", 8), ("–°–µ–Ω—Ç—è–±—Ä—å", 9)],
            4: [("–û–∫—Ç—è–±—Ä—å", 10), ("–ù–æ—è–±—Ä—å", 11), ("–î–µ–∫–∞–±—Ä—å", 12)]
        }
        
        months = quarter_months[quarter]
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ generate_quarter_report
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å 3 –ª–∏—Å—Ç–∞–º–∏
        from openpyxl import Workbook
        from openpyxl.styles import Font, Alignment, PatternFill
        
        wb = Workbook()
        
        # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏—Å—Ç
        wb.remove(wb.active)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees = employee_provider.get_employees()
        if not employees:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", 
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–¥–µ–ª
        if dept_number != "all":
            filtered_employees = []
            for employee in employees:
                emp_dept = get_department_numbers(employee['department'])
                if emp_dept == dept_number:
                    filtered_employees.append(employee)
            employees = filtered_employees
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
        total_months = len(months)
        current_month = 0
        
        for month_name, month_num in months:
            current_month += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –º–µ—Å—è—Ü–µ–≤
            month_progress = (current_month / total_months) * 100
            month_progress_bar = "‚ñà" * int(month_progress / 2) + "‚ñë" * (50 - int(month_progress / 2))
            await query.edit_message_text(
                f"üîÑ –§–æ—Ä–º–∏—Ä—É—é –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...\n"
                f"–ú–µ—Å—è—Ü: {month_name} {year}\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å –º–µ—Å—è—Ü–µ–≤: {month_progress_bar} {month_progress:.1f}%\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Å—è—Ü–µ–≤: {current_month}/{total_months}",
                reply_markup=None
            )
            
            ws = wb.create_sheet(title=month_name)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ['–°–æ—Ç—Ä—É–¥–Ω–∏–∫', '–û—Ç–¥–µ–ª', '–í—Ö–æ–¥—è—â–∏–µ üìû', '–ò—Å—Ö–æ–¥—è—â–∏–µ üì§', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ‚ùå', '–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤']
            for col, header in enumerate(headers, 1):
                cell = ws.cell(row=1, column=col, value=header)
                cell.font = Font(bold=True)
                cell.alignment = Alignment(horizontal='center')
                cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –º–µ—Å—è—Ü–∞
            month_period = f"month_{year}_{month_num:02d}"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü
            try:
                start_date_str, end_date_str = get_period_dates(month_period, context)
                logger.info(f"–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ {month_name} {year}: {start_date_str} - {end_date_str}")
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
                row = 2
                total_incoming = 0
                total_outgoing = 0
                total_missed = 0
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
                valid_employees = [emp for emp in employees if emp.get('sim') and emp['sim'] != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö']
                total_employees = len(valid_employees)
                current_employee = 0
                
                for employee in employees:
                    if not employee.get('sim') or employee['sim'] == '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
                        continue
                    
                    current_employee += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
                    employee_progress = (current_employee / total_employees) * 100
                    employee_progress_bar = "‚ñà" * int(employee_progress / 2) + "‚ñë" * (50 - int(employee_progress / 2))
                    await query.edit_message_text(
                        f"üîÑ –§–æ—Ä–º–∏—Ä—É—é –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...\n"
                        f"–ú–µ—Å—è—Ü: {month_name} {year}\n"
                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å –º–µ—Å—è—Ü–µ–≤: {month_progress_bar} {month_progress:.1f}%\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Å—è—Ü–µ–≤: {current_month}/{total_months}\n"
                        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee['last_name']} {employee['first_name']}\n"
                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {employee_progress_bar} {employee_progress:.1f}%\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {current_employee}/{total_employees}",
                        reply_markup=None
                    )
                        
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü
                    data = fetch_call_history(start_date_str, end_date_str, employee['sim'])
                    if not data:
                        continue
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    df = pd.DataFrame(data)
                    if not df.empty:
                        incoming_types = ['in', 'incoming', 'received', 'inbound', '–≤—Ö–æ–¥—è—â–∏–π']
                        outgoing_types = ['out', 'outgoing', '–∏—Å—Ö–æ–¥—è—â–∏–π']
                        missed_statuses = ['noanswer', 'missed', '–ø—Ä–æ–ø—É—â–µ–Ω', '–Ω–µ–æ—Ç–≤–µ—á–µ–Ω', '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞']

                        incoming_count = df[df['type'].str.lower().isin(incoming_types)].shape[0]
                        outgoing_count = df[df['type'].str.lower().isin(outgoing_types)].shape[0]
                        missed_count = df[df['status'].str.lower().isin(missed_statuses)].shape[0] if 'status' in df.columns else 0
                        total_calls = len(data)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç
                        ws.cell(row=row, column=1, value=f"{employee['last_name']} {employee['first_name']}")
                        ws.cell(row=row, column=2, value=get_department_numbers(employee['department']))
                        ws.cell(row=row, column=3, value=incoming_count)
                        ws.cell(row=row, column=4, value=outgoing_count)
                        ws.cell(row=row, column=5, value=missed_count)
                        ws.cell(row=row, column=6, value=total_calls)
                        
                        total_incoming += incoming_count
                        total_outgoing += outgoing_count
                        total_missed += missed_count
                        row += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                if row > 2:  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    ws.cell(row=row, column=1, value=f"–ò–¢–û–ì–û {dept_number if dept_number != 'all' else '–í–°–ï–ì–û'}")
                    ws.cell(row=row, column=2, value="")
                    ws.cell(row=row, column=3, value=total_incoming)
                    ws.cell(row=row, column=4, value=total_outgoing)
                    ws.cell(row=row, column=5, value=total_missed)
                    ws.cell(row=row, column=6, value=total_incoming + total_outgoing + total_missed)
                    
                    # –°—Ç–∏–ª–∏ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                    for col in range(1, 7):
                        cell = ws.cell(row=row, column=col)
                        cell.font = Font(bold=True)
                        cell.fill = PatternFill(start_color="E6E6E6", end_color="E6E6E6", fill_type="solid")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {month_name}: {str(e)}")
                ws.cell(row=2, column=1, value=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            
            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
            for column in ws.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                ws.column_dimensions[column_letter].width = adjusted_width
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = f"quarter_report_{year}_Q{quarter}_3sheets_{dept_number if dept_number != 'all' else 'all'}.xlsx"
        filepath = f"/tmp/{filename}"
        wb.save(filepath)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filepath, 'rb') as file:
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=file,
                filename=filename,
                caption=f"üìä –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç {year} Q{quarter} (3 –ª–∏—Å—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º)"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filepath)
        
        await query.edit_message_text(
            f"‚úÖ –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç {year} Q{quarter} —Å 3 –ª–∏—Å—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å 3 –ª–∏—Å—Ç–∞–º–∏: {str(e)}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

# –î–æ–±–∞–≤–ª—è—é/–ø–µ—Ä–µ–º–µ—â–∞—é —Ñ—É–Ω–∫—Ü–∏—é update_employees_command –≤—ã—à–µ main
async def update_employees_command(update, context):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
    try:
        employee_provider.update_cache(force=True)
        await update.message.reply_text("‚úÖ –ö—ç—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")

def main():
    global bot_application
    
    application = Application.builder().token("8083344307:AAEwLJNPEoPRKxEUXJaXoHgqpTa6k3lA5_k").build()
    bot_application = application
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("update_employees", update_employees_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_error_handler(error_handler)
    
    async def on_startup(app):
        # –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        try:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, employee_provider.update_cache, True)
            logger.info("‚úÖ –ö—ç—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
    
    application.post_init = on_startup
    
    application.run_polling()

if __name__ == "__main__":
    main() 